// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace InvoiceNinjaClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Invoice Ninja. Open Source Invoicing lives here.
    /// </summary>
    public partial interface IInvoiceNinja : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// The API secret as defined by the .env variable API_SECRET
        /// </summary>
        string XApiSecret { get; set; }

        /// <summary>
        /// Used to send the XMLHttpRequest header
        /// </summary>
        string XRequestedWith { get; set; }

        /// <summary>
        /// The API token to be used for authentication
        /// </summary>
        string XApiToken { get; set; }

        /// <summary>
        /// The login password when challenged
        /// </summary>
        string XApiPassword { get; set; }

        /// <summary>
        /// Includes child relationships in the response, format is comma
        /// separated
        /// </summary>
        string Include { get; set; }

        /// <summary>
        /// Returns static variables
        /// </summary>
        string IncludeStatic { get; set; }

        /// <summary>
        /// Clears the static cache
        /// </summary>
        string ClearCache { get; set; }

        /// <summary>
        /// Replaces the default response index from data to a user specific
        /// string
        /// </summary>
        string Index { get; set; }

        /// <summary>
        /// The API version
        /// </summary>
        double? ApiVersion { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Gets the IReset.
        /// </summary>
        IReset Reset { get; }

        /// <summary>
        /// Attempts a new account signup
        /// </summary>
        /// <remarks>
        /// Attempts a new account signup and returns a CompanyUser object on
        /// success
        /// </remarks>
        /// <param name='body'>
        /// Signup credentials
        /// </param>
        /// <param name='tokenName'>
        /// A custom name for the user company token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,PostSignupHeaders>> PostSignupWithHttpMessagesAsync(Paths1bv9t8papiV1SignuppostrequestbodycontentapplicationJsonschema body, string tokenName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of actvities
        /// </summary>
        /// <remarks>
        /// Lists all activities
        /// </remarks>
        /// <param name='rows'>
        /// The number of activities to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetActivitiesHeaders>> GetActivitiesWithHttpMessagesAsync(double? rows = default(double?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts authentication
        /// </summary>
        /// <remarks>
        /// Returns a CompanyUser object on success
        /// </remarks>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,PostLoginHeaders>> PostLoginWithHttpMessagesAsync(Paths12jspfgapiV1LoginpostrequestbodycontentapplicationJsonschema body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Refreshes the dataset
        /// </summary>
        /// <remarks>
        /// Refreshes the dataset
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,RefreshHeaders>> RefreshWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of clients
        /// </summary>
        /// <remarks>
        /// Lists clients, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the clients, these are handled by the ClientFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetClientsHeaders>> GetClientsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a client
        /// </summary>
        /// <remarks>
        /// Adds an client to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreClientHeaders>> StoreClientWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a client
        /// </summary>
        /// <remarks>
        /// Displays a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Client Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowClientHeaders>> ShowClientWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a client
        /// </summary>
        /// <remarks>
        /// Handles the updating of a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Client Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateClientHeaders>> UpdateClientWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Client Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteClientHeaders>> DeleteClientWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a client for editting
        /// </summary>
        /// <remarks>
        /// Displays a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Client Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditClientHeaders>> EditClientWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank client object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetClientsCreateHeaders>> GetClientsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of clients
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkClientsHeaders>> BulkClientsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of companies
        /// </summary>
        /// <remarks>
        /// Lists companies, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the companies, these are handled by the CompanyFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCompaniesHeaders>> GetCompaniesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a company
        /// </summary>
        /// <remarks>
        /// Adds an company to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreCompanyHeaders>> StoreCompanyWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank company object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCompaniesCreateHeaders>> GetCompaniesCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an company
        /// </summary>
        /// <remarks>
        /// Displays an company by id
        /// </remarks>
        /// <param name='id'>
        /// The Company Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowCompanyHeaders>> ShowCompanyWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an company
        /// </summary>
        /// <remarks>
        /// Handles the updating of an company by id
        /// </remarks>
        /// <param name='id'>
        /// The Company Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateCompanyHeaders>> UpdateCompanyWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a company
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an company by id
        /// </remarks>
        /// <param name='id'>
        /// The Company Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteCompanyHeaders>> DeleteCompanyWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an company for editting
        /// </summary>
        /// <remarks>
        /// Displays an company by id
        /// </remarks>
        /// <param name='id'>
        /// The Company Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditCompanyHeaders>> EditCompanyWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of company_gateways
        /// </summary>
        /// <remarks>
        /// Lists company_gateways, search and filters allow fine grained lists
        /// to be generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the company_gateways, these are handled by the
        /// CompanyGatewayFilters class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCompanyGatewaysHeaders>> GetCompanyGatewaysWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a CompanyGateway
        /// </summary>
        /// <remarks>
        /// Adds an CompanyGateway to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreCompanyGatewayHeaders>> StoreCompanyGatewayWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank CompanyGateway object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCompanyGatewaysCreateHeaders>> GetCompanyGatewaysCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an CompanyGateway
        /// </summary>
        /// <remarks>
        /// Displays an CompanyGateway by id
        /// </remarks>
        /// <param name='id'>
        /// The CompanyGateway Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowCompanyGatewayHeaders>> ShowCompanyGatewayWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an CompanyGateway
        /// </summary>
        /// <remarks>
        /// Handles the updating of an CompanyGateway by id
        /// </remarks>
        /// <param name='id'>
        /// The CompanyGateway Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateCompanyGatewayHeaders>> UpdateCompanyGatewayWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a CompanyGateway
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an CompanyGateway by id
        /// </remarks>
        /// <param name='id'>
        /// The CompanyGateway Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteCompanyGatewayHeaders>> DeleteCompanyGatewayWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an CompanyGateway for editting
        /// </summary>
        /// <remarks>
        /// Displays an CompanyGateway by id
        /// </remarks>
        /// <param name='id'>
        /// The CompanyGateway Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditCompanyGatewayHeaders>> EditCompanyGatewayWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of company_ledger
        /// </summary>
        /// <remarks>
        /// Lists the company_ledger.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCompanyLedgerHeaders>> GetCompanyLedgerWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a company user record
        /// </summary>
        /// <remarks>
        /// Attempts to update a company user record. A company user can modify
        /// only their settings fields. Full access for Admin users
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateCompanyUserHeaders>> UpdateCompanyUserWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of credits
        /// </summary>
        /// <remarks>
        /// Lists credits, search and filters allow fine grained lists to be
        /// generated.
        /// *
        /// *      Query parameters can be added to performed more fine grained
        /// filtering of the credits, these are handled by the CreditFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCreditsHeaders>> GetCreditsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a credit
        /// </summary>
        /// <remarks>
        /// Adds an credit to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreCreditHeaders>> StoreCreditWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank credit object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetCreditsCreateHeaders>> GetCreditsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an credit
        /// </summary>
        /// <remarks>
        /// Displays an credit by id
        /// </remarks>
        /// <param name='id'>
        /// The Credit Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowCreditHeaders>> ShowCreditWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a credit
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an credit by id
        /// </remarks>
        /// <param name='id'>
        /// The Credit Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteCreditHeaders>> DeleteCreditWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an credit for editting
        /// </summary>
        /// <remarks>
        /// Displays an credit by id
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditCreditHeaders>> EditCreditWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an Credit
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Credit by id
        /// </remarks>
        /// <param name='id'>
        /// The Credit Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateCreditHeaders>> UpdateCreditWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of credits
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,BulkCreditsHeaders>> BulkCreditsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of designs
        /// </summary>
        /// <remarks>
        /// Lists designs
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDesignsHeaders>> GetDesignsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a design
        /// </summary>
        /// <remarks>
        /// Adds an design to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreDesignHeaders>> StoreDesignWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a design
        /// </summary>
        /// <remarks>
        /// Displays a design by id
        /// </remarks>
        /// <param name='id'>
        /// The Design Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowDesignHeaders>> ShowDesignWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a design
        /// </summary>
        /// <remarks>
        /// Handles the updating of a design by id
        /// </remarks>
        /// <param name='id'>
        /// The Design Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateDesignHeaders>> UpdateDesignWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a design
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a design by id
        /// </remarks>
        /// <param name='id'>
        /// The Design Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteDesignHeaders>> DeleteDesignWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a design for editting
        /// </summary>
        /// <remarks>
        /// Displays a design by id
        /// </remarks>
        /// <param name='id'>
        /// The Design Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditDesignHeaders>> EditDesignWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank design object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetDesignsCreateHeaders>> GetDesignsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of designs
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkDesignsHeaders>> BulkDesignsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends an email for an entity
        /// </summary>
        /// <remarks>
        /// Sends an email for an entity
        /// </remarks>
        /// <param name='body'>
        /// The template subject and body
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,SendEmailTemplateHeaders>> SendEmailTemplateWithHttpMessagesAsync(Pathss595z8apiV1EmailspostrequestbodycontentapplicationJsonschema body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of expenses
        /// </summary>
        /// <remarks>
        /// Lists expenses, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the expenses, these are handled by the ExpenseFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetExpensesHeaders>> GetExpensesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a client
        /// </summary>
        /// <remarks>
        /// Adds an client to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreExpenseHeaders>> StoreExpenseWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a client
        /// </summary>
        /// <remarks>
        /// Displays a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Expense Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowExpenseHeaders>> ShowExpenseWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a client
        /// </summary>
        /// <remarks>
        /// Handles the updating of a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Expense Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateExpenseHeaders>> UpdateExpenseWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Expense Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteExpenseHeaders>> DeleteExpenseWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a client for editting
        /// </summary>
        /// <remarks>
        /// Displays a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Expense Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditExpenseHeaders>> EditExpenseWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank client object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetExpensesCreateHeaders>> GetExpensesCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of expenses
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkExpensesHeaders>> BulkExpensesWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of group_settings
        /// </summary>
        /// <remarks>
        /// Lists group_settings, search and filters allow fine grained lists
        /// to be generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the group_settings, these are handled by the
        /// GroupSettingFilters class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetGroupSettingsHeaders>> GetGroupSettingsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a GroupSetting
        /// </summary>
        /// <remarks>
        /// Adds an GroupSetting to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreGroupSettingHeaders>> StoreGroupSettingWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank GroupSetting object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetGroupSettingsCreateHeaders>> GetGroupSettingsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an GroupSetting
        /// </summary>
        /// <remarks>
        /// Displays an GroupSetting by id
        /// </remarks>
        /// <param name='id'>
        /// The GroupSetting Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowGroupSettingHeaders>> ShowGroupSettingWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an GroupSetting
        /// </summary>
        /// <remarks>
        /// Handles the updating of an GroupSetting by id
        /// </remarks>
        /// <param name='id'>
        /// The GroupSetting Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateGroupSettingHeaders>> UpdateGroupSettingWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a GroupSetting
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an GroupSetting by id
        /// </remarks>
        /// <param name='id'>
        /// The GroupSetting Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteGroupSettingHeaders>> DeleteGroupSettingWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an GroupSetting for editting
        /// </summary>
        /// <remarks>
        /// Displays an GroupSetting by id
        /// </remarks>
        /// <param name='id'>
        /// The GroupSetting Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditGroupSettingHeaders>> EditGroupSettingWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of invoices
        /// </summary>
        /// <remarks>
        /// Lists invoices, search and filters allow fine grained lists to be
        /// generated.
        /// *
        /// *  Query parameters can be added to performed more fine grained
        /// filtering of the invoices, these are handled by the InvoiceFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetInvoicesHeaders>> GetInvoicesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a invoice
        /// </summary>
        /// <remarks>
        /// Adds an invoice to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreInvoiceHeaders>> StoreInvoiceWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank invoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetInvoicesCreateHeaders>> GetInvoicesCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an invoice
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowInvoiceHeaders>> ShowInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an invoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an invoice by id
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateInvoiceHeaders>> UpdateInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a invoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an invoice by id
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteInvoiceHeaders>> DeleteInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an invoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an invoice by id
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditInvoiceHeaders>> EditInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of invoices
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,BulkInvoicesHeaders>> BulkInvoicesWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs a custom action on an invoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an invoice.
        /// *
        /// *  The current range of actions are as follows
        /// *  - clone_to_invoice
        /// *  - clone_to_quote
        /// *  - history
        /// *  - delivery_note
        /// *  - mark_paid
        /// *  - download
        /// *  - archive
        /// *  - delete
        /// *  - email
        /// </remarks>
        /// <param name='id'>
        /// The Invoice Hashed ID
        /// </param>
        /// <param name='action'>
        /// The action string to be performed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ActionInvoiceHeaders>> ActionInvoiceWithHttpMessagesAsync(string id, string action, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download a specific invoice by invitation key
        /// </summary>
        /// <remarks>
        /// Downloads a specific invoice
        /// </remarks>
        /// <param name='invitationKey'>
        /// The Invoice Invitation Key
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DownloadInvoiceHeaders>> DownloadInvoiceWithHttpMessagesAsync(string invitationKey, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts to claim a white label license
        /// </summary>
        /// <remarks>
        /// Attempts to claim a white label license
        /// </remarks>
        /// <param name='licenseKey'>
        /// The license hash
        /// </param>
        /// <param name='productId'>
        /// The ID of the product purchased.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,GetClaimLicenseHeaders>> GetClaimLicenseWithHttpMessagesAsync(string licenseKey, string productId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts to purge a company record and all its child records
        /// </summary>
        /// <remarks>
        /// Attempts to purge a company record and all its child records
        /// </remarks>
        /// <param name='company'>
        /// The Company Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,PostPurgeCompanyHeaders>> PostPurgeCompanyWithHttpMessagesAsync(string company, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attempts to purge a companies child records but save the company
        /// record and its settings
        /// </summary>
        /// <remarks>
        /// Attempts to purge a companies child records but save the company
        /// record and its settings
        /// </remarks>
        /// <param name='company'>
        /// The Company Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,PostPurgeCompanySaveSettingsHeaders>> PostPurgeCompanySaveSettingsWithHttpMessagesAsync(string company, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts the migration from previous version of Invoice Ninja
        /// </summary>
        /// <remarks>
        /// Starts the migration from previous version of Invoice Ninja
        /// </remarks>
        /// <param name='migration'>
        /// The migraton file
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,PostStartMigrationHeaders>> PostStartMigrationWithHttpMessagesAsync(Stream migration, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of payments
        /// </summary>
        /// <remarks>
        /// Lists payments, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the payments, these are handled by the PaymentFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetPaymentsHeaders>> GetPaymentsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a Payment
        /// </summary>
        /// <remarks>
        /// Adds an Payment to the system
        /// </remarks>
        /// <param name='body'>
        /// The payment request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StorePaymentHeaders>> StorePaymentWithHttpMessagesAsync(Payment body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank Payment object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetPaymentsCreateHeaders>> GetPaymentsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an Payment
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <param name='id'>
        /// The Payment Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowPaymentHeaders>> ShowPaymentWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an Payment
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Payment by id
        /// </remarks>
        /// <param name='id'>
        /// The Payment Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdatePaymentHeaders>> UpdatePaymentWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Payment
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Payment by id
        /// </remarks>
        /// <param name='id'>
        /// The Payment Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeletePaymentHeaders>> DeletePaymentWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an Payment for editting
        /// </summary>
        /// <remarks>
        /// Displays an Payment by id
        /// </remarks>
        /// <param name='id'>
        /// The Payment Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditPaymentHeaders>> EditPaymentWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of payments
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkPaymentsHeaders>> BulkPaymentsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs a custom action on an Payment
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an Payment.
        ///
        /// The current range of actions are as follows
        /// - clone_to_Payment
        /// - clone_to_quote
        /// - history
        /// - delivery_note
        /// - mark_paid
        /// - download
        /// - archive
        /// - delete
        /// - email
        /// </remarks>
        /// <param name='id'>
        /// The Payment Hashed ID
        /// </param>
        /// <param name='action'>
        /// The action string to be performed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ActionPaymentHeaders>> ActionPaymentWithHttpMessagesAsync(string id, string action, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a Refund
        /// </summary>
        /// <remarks>
        /// Adds an Refund to the system
        /// </remarks>
        /// <param name='body'>
        /// The refund request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreRefundHeaders>> StoreRefundWithHttpMessagesAsync(Payment body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a pdf preview
        /// </summary>
        /// <remarks>
        /// Returns a pdf preview.
        /// </remarks>
        /// <param name='entity'>
        /// The PDF
        /// </param>
        /// <param name='entityId'>
        /// The Entity ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,GetPreviewHeaders>> GetPreviewWithHttpMessagesAsync(string entity, string entityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of products
        /// </summary>
        /// <remarks>
        /// Lists products, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the products, these are handled by the ProductFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetProductsHeaders>> GetProductsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a Product
        /// </summary>
        /// <remarks>
        /// Adds an Product to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreProductHeaders>> StoreProductWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank Product object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetProductsCreateHeaders>> GetProductsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an Product
        /// </summary>
        /// <remarks>
        /// Displays an Product by id
        /// </remarks>
        /// <param name='id'>
        /// The Product Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowProductHeaders>> ShowProductWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an Product
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Product by id
        /// </remarks>
        /// <param name='id'>
        /// The Product Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateProductHeaders>> UpdateProductWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Product
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Product by id
        /// </remarks>
        /// <param name='id'>
        /// The Product Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteProductHeaders>> DeleteProductWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an Product for editting
        /// </summary>
        /// <remarks>
        /// Displays an Product by id
        /// </remarks>
        /// <param name='id'>
        /// The Product Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditProductHeaders>> EditProductWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of products
        /// </summary>
        /// <param name='body'>
        /// Hashed IDs
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkProductsHeaders>> BulkProductsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of quotes
        /// </summary>
        /// <remarks>
        /// Lists quotes, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the quotes, these are handled by the QuoteFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetQuotesHeaders>> GetQuotesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a Quote
        /// </summary>
        /// <remarks>
        /// Adds an Quote to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreQuoteHeaders>> StoreQuoteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank Quote object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetQuotesCreateHeaders>> GetQuotesCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an Quote
        /// </summary>
        /// <remarks>
        /// Displays an Quote by id
        /// </remarks>
        /// <param name='id'>
        /// The Quote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowQuoteHeaders>> ShowQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an Quote
        /// </summary>
        /// <remarks>
        /// Handles the updating of an Quote by id
        /// </remarks>
        /// <param name='id'>
        /// The Quote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateQuoteHeaders>> UpdateQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a Quote
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an Quote by id
        /// </remarks>
        /// <param name='id'>
        /// The Quote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteQuoteHeaders>> DeleteQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an Quote for editting
        /// </summary>
        /// <remarks>
        /// Displays an Quote by id
        /// </remarks>
        /// <param name='id'>
        /// The Quote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditQuoteHeaders>> EditQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of quotes
        /// </summary>
        /// <param name='body'>
        /// Hashed ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkQuotesHeaders>> BulkQuotesWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs a custom action on an Quote
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an Quote.
        ///
        /// The current range of actions are as follows
        /// - clone_to_Quote
        /// - clone_to_quote
        /// - history
        /// - delivery_note
        /// - mark_paid
        /// - download
        /// - archive
        /// - delete
        /// - email
        /// </remarks>
        /// <param name='id'>
        /// The Quote Hashed ID
        /// </param>
        /// <param name='action'>
        /// The action string to be performed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ActionQuoteHeaders>> ActionQuoteWithHttpMessagesAsync(string id, string action, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of recurring_invoices
        /// </summary>
        /// <remarks>
        /// Lists recurring_invoices, search and filters allow fine grained
        /// lists to be generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the recurring_invoices, these are handled by the
        /// RecurringInvoiceFilters class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetRecurringInvoicesHeaders>> GetRecurringInvoicesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Adds an RecurringInvoice to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreRecurringInvoiceHeaders>> StoreRecurringInvoiceWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank RecurringInvoice object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetRecurringInvoicesCreateHeaders>> GetRecurringInvoicesCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringInvoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowRecurringInvoiceHeaders>> ShowRecurringInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the updating of an RecurringInvoice by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringInvoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateRecurringInvoiceHeaders>> UpdateRecurringInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an RecurringInvoice by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringInvoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteRecurringInvoiceHeaders>> DeleteRecurringInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an RecurringInvoice for editting
        /// </summary>
        /// <remarks>
        /// Displays an RecurringInvoice by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringInvoice Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditRecurringInvoiceHeaders>> EditRecurringInvoiceWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of recurring_invoices
        /// </summary>
        /// <param name='body'>
        /// Hashed IDs
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkRecurringInvoicesHeaders>> BulkRecurringInvoicesWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs a custom action on an RecurringInvoice
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an RecurringInvoice.
        ///
        /// The current range of actions are as follows
        /// - clone_to_RecurringInvoice
        /// - clone_to_quote
        /// - history
        /// - delivery_note
        /// - mark_paid
        /// - download
        /// - archive
        /// - delete
        /// - email
        /// </remarks>
        /// <param name='id'>
        /// The RecurringInvoice Hashed ID
        /// </param>
        /// <param name='action'>
        /// The action string to be performed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ActionRecurringInvoiceHeaders>> ActionRecurringInvoiceWithHttpMessagesAsync(string id, string action, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of recurring_quotes
        /// </summary>
        /// <remarks>
        /// Lists recurring_quotes, search and filters allow fine grained lists
        /// to be generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the recurring_quotes, these are handled by the
        /// RecurringQuoteFilters class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetRecurringQuotesHeaders>> GetRecurringQuotesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a RecurringQuote
        /// </summary>
        /// <remarks>
        /// Adds an RecurringQuote to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreRecurringQuoteHeaders>> StoreRecurringQuoteWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank RecurringQuote object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetRecurringQuotesCreateHeaders>> GetRecurringQuotesCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an RecurringQuote
        /// </summary>
        /// <remarks>
        /// Displays an RecurringQuote by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringQuote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowRecurringQuoteHeaders>> ShowRecurringQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an RecurringQuote
        /// </summary>
        /// <remarks>
        /// Handles the updating of an RecurringQuote by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringQuote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateRecurringQuoteHeaders>> UpdateRecurringQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a RecurringQuote
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an RecurringQuote by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringQuote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteRecurringQuoteHeaders>> DeleteRecurringQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an RecurringQuote for editting
        /// </summary>
        /// <remarks>
        /// Displays an RecurringQuote by id
        /// </remarks>
        /// <param name='id'>
        /// The RecurringQuote Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditRecurringQuoteHeaders>> EditRecurringQuoteWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of recurring_quotes
        /// </summary>
        /// <param name='body'>
        /// Hashed ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkRecurringQuotesHeaders>> BulkRecurringQuotesWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs a custom action on an RecurringQuote
        /// </summary>
        /// <remarks>
        /// Performs a custom action on an RecurringQuote.
        ///
        /// The current range of actions are as follows
        /// - clone_to_RecurringQuote
        /// - clone_to_quote
        /// - history
        /// - delivery_note
        /// - mark_paid
        /// - download
        /// - archive
        /// - delete
        /// - email
        /// </remarks>
        /// <param name='id'>
        /// The RecurringQuote Hashed ID
        /// </param>
        /// <param name='action'>
        /// The action string to be performed
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ActionRecurringQuoteHeaders>> ActionRecurringQuoteWithHttpMessagesAsync(string id, string action, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs a system update
        /// </summary>
        /// <remarks>
        /// Performs a system update
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError>> SelfUpdateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of subscriptions
        /// </summary>
        /// <remarks>
        /// Lists subscriptions, search and filters allow fine grained lists to
        /// be generated.
        /// *
        /// *      Query parameters can be added to performed more fine grained
        /// filtering of the subscriptions, these are handled by the
        /// SubscriptionFilters class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSubscriptionsHeaders>> GetSubscriptionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a subscription
        /// </summary>
        /// <remarks>
        /// Adds an subscription to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreSubscriptionHeaders>> StoreSubscriptionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a subscription
        /// </summary>
        /// <remarks>
        /// Displays a subscription by id
        /// </remarks>
        /// <param name='id'>
        /// The Subscription Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowSubscriptionHeaders>> ShowSubscriptionWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a subscription
        /// </summary>
        /// <remarks>
        /// Handles the updating of a subscription by id
        /// </remarks>
        /// <param name='id'>
        /// The Subscription Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateSubscriptionHeaders>> UpdateSubscriptionWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a subscription
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a subscription by id
        /// </remarks>
        /// <param name='id'>
        /// The Subscription Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteSubscriptionHeaders>> DeleteSubscriptionWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a subscription for editting
        /// </summary>
        /// <remarks>
        /// Displays a subscription by id
        /// </remarks>
        /// <param name='id'>
        /// The Subscription Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditSubscriptionHeaders>> EditSubscriptionWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank subscription object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetSubscriptionsCreateHeaders>> GetSubscriptionsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of subscriptions
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkSubscriptionsHeaders>> BulkSubscriptionsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a hook
        /// </summary>
        /// <remarks>
        /// Adds a hooks to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreHookHeaders>> StoreHookWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a hook
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a hook by id
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The Subscription Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteHookHeaders>> DeleteHookWithHttpMessagesAsync(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a support message to Invoice Ninja team
        /// </summary>
        /// <remarks>
        /// Allows a user to send a support message to the Invoice Ninja Team
        /// </remarks>
        /// <param name='body'>
        /// The message
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>,SupportMessageHeaders>> SupportMessageWithHttpMessagesAsync(string body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of tax_rates
        /// </summary>
        /// <remarks>
        /// Lists tax rates
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetTaxRatesHeaders>> GetTaxRatesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank Tax Rate object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetTaxRateCreateHeaders>> GetTaxRateCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a Tax Rate
        /// </summary>
        /// <remarks>
        /// Displays an TaxRate by id
        /// </remarks>
        /// <param name='id'>
        /// The TaxRate Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowTaxRateHeaders>> ShowTaxRateWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a tax rate
        /// </summary>
        /// <remarks>
        /// Handles the updating of a tax rate by id
        /// </remarks>
        /// <param name='id'>
        /// The TaxRate Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateTaxRateHeaders>> UpdateTaxRateWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a TaxRate
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an TaxRate by id
        /// </remarks>
        /// <param name='id'>
        /// The TaxRate Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteTaxRateHeaders>> DeleteTaxRateWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a Tax Rate for editting
        /// </summary>
        /// <remarks>
        /// Displays a Tax Rate by id
        /// </remarks>
        /// <param name='id'>
        /// The TaxRate Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditTaxRateHeaders>> EditTaxRateWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a entity template with the template variables replaced with
        /// the Entities
        /// </summary>
        /// <remarks>
        /// Returns a entity template with the template variables replaced with
        /// the Entities
        /// </remarks>
        /// <param name='body'>
        /// The template subject and body
        /// </param>
        /// <param name='entity'>
        /// The Entity (invoice,quote,recurring_invoice)
        /// </param>
        /// <param name='entityId'>
        /// The Entity ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetShowTemplateHeaders>> GetShowTemplateWithHttpMessagesAsync(Paths1329sb1apiV1TemplatespostrequestbodycontentapplicationJsonschema body, string entity, string entityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of company tokens
        /// </summary>
        /// <remarks>
        /// Lists company tokens.
        /// *
        /// *   Query parameters can be added to performed more fine grained
        /// filtering of the tokens, these are handled by the TokenFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetTokensHeaders>> GetTokensWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a token
        /// </summary>
        /// <remarks>
        /// Adds an token to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreTokenHeaders>> StoreTokenWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a token
        /// </summary>
        /// <remarks>
        /// Displays a token by id
        /// </remarks>
        /// <param name='id'>
        /// The Token Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowTokenHeaders>> ShowTokenWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a token
        /// </summary>
        /// <remarks>
        /// Handles the updating of a token by id
        /// </remarks>
        /// <param name='id'>
        /// The Token Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateTokenHeaders>> UpdateTokenWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a token
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a token by id
        /// </remarks>
        /// <param name='id'>
        /// The Token Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteTokenHeaders>> DeleteTokenWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a token for editting
        /// </summary>
        /// <remarks>
        /// Displays a token by id
        /// </remarks>
        /// <param name='id'>
        /// The Token Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditTokenHeaders>> EditTokenWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank token object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetTokensCreateHeaders>> GetTokensCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of tokens
        /// </summary>
        /// <param name='body'>
        /// Token ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkTokensHeaders>> BulkTokensWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <remarks>
        /// Lists users, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the users, these are handled by the UserFilters class
        /// which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetUsersHeaders>> GetUsersWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a User
        /// </summary>
        /// <remarks>
        /// Adds an User to the system
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreUserHeaders>> StoreUserWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank User object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetUsersCreateHeaders>> GetUsersCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an User
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <param name='id'>
        /// The User Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowUserHeaders>> ShowUserWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an User
        /// </summary>
        /// <remarks>
        /// Handles the updating of an User by id
        /// </remarks>
        /// <param name='id'>
        /// The User Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateUserHeaders>> UpdateUserWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a User
        /// </summary>
        /// <remarks>
        /// Handles the deletion of an User by id
        /// </remarks>
        /// <param name='id'>
        /// The User Hashed ID
        /// </param>
        /// <param name='tokenName'>
        /// Customized name for the Users API Token
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteUserHeaders>> DeleteUserWithHttpMessagesAsync(string id, string tokenName = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows an User for editting
        /// </summary>
        /// <remarks>
        /// Displays an User by id
        /// </remarks>
        /// <param name='id'>
        /// The User Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditUserHeaders>> EditUserWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of users
        /// </summary>
        /// <param name='body'>
        /// Hashed ids
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkUsersHeaders>> BulkUsersWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Attach an existing user to a company
        /// </summary>
        /// <remarks>
        /// Attach an existing user to a company
        /// </remarks>
        /// <param name='body'>
        /// The company user object
        /// </param>
        /// <param name='user'>
        /// The user hashed_id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,AttachUserHeaders>> AttachUserWithHttpMessagesAsync(CompanyUser body, string user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Detach an existing user to a company
        /// </summary>
        /// <remarks>
        /// Detach an existing user from a company
        /// </remarks>
        /// <param name='user'>
        /// The user hashed_id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DetachUserHeaders>> DetachUserWithHttpMessagesAsync(string user, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a list of vendors
        /// </summary>
        /// <remarks>
        /// Lists vendors, search and filters allow fine grained lists to be
        /// generated.
        ///
        /// Query parameters can be added to performed more fine grained
        /// filtering of the vendors, these are handled by the VendorFilters
        /// class which defines the methods available
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVendorsHeaders>> GetVendorsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds a client
        /// </summary>
        /// <remarks>
        /// Adds an client to a company
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,StoreVendorHeaders>> StoreVendorWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a client
        /// </summary>
        /// <remarks>
        /// Displays a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Vendor Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,ShowVendorHeaders>> ShowVendorWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a client
        /// </summary>
        /// <remarks>
        /// Handles the updating of a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Vendor Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,UpdateVendorHeaders>> UpdateVendorWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a client
        /// </summary>
        /// <remarks>
        /// Handles the deletion of a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Vendor Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ValidationError,DeleteVendorHeaders>> DeleteVendorWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Shows a client for editting
        /// </summary>
        /// <remarks>
        /// Displays a client by id
        /// </remarks>
        /// <param name='id'>
        /// The Vendor Hashed ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EditVendorHeaders>> EditVendorWithHttpMessagesAsync(string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new blank client object
        /// </summary>
        /// <remarks>
        /// Returns a blank object with default values
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetVendorsCreateHeaders>> GetVendorsCreateWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Performs bulk actions on an array of vendors
        /// </summary>
        /// <param name='body'>
        /// User credentials
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,BulkVendorsHeaders>> BulkVendorsWithHttpMessagesAsync(IList<int?> body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
