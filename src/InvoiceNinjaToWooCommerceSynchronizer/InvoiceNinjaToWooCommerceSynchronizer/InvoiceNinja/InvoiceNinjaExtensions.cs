// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace InvoiceNinjaClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InvoiceNinja.
    /// </summary>
    public static partial class InvoiceNinjaExtensions
    {
            /// <summary>
            /// Attempts a new account signup
            /// </summary>
            /// <remarks>
            /// Attempts a new account signup and returns a CompanyUser object on success
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Signup credentials
            /// </param>
            /// <param name='tokenName'>
            /// A custom name for the user company token
            /// </param>
            public static object PostSignup(this IInvoiceNinja operations, Paths1bv9t8papiV1SignuppostrequestbodycontentapplicationJsonschema body, string tokenName)
            {
                return operations.PostSignupAsync(body, tokenName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempts a new account signup
            /// </summary>
            /// <remarks>
            /// Attempts a new account signup and returns a CompanyUser object on success
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Signup credentials
            /// </param>
            /// <param name='tokenName'>
            /// A custom name for the user company token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostSignupAsync(this IInvoiceNinja operations, Paths1bv9t8papiV1SignuppostrequestbodycontentapplicationJsonschema body, string tokenName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSignupWithHttpMessagesAsync(body, tokenName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of actvities
            /// </summary>
            /// <remarks>
            /// Lists all activities
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rows'>
            /// The number of activities to return
            /// </param>
            public static object GetActivities(this IInvoiceNinja operations, double? rows = default(double?))
            {
                return operations.GetActivitiesAsync(rows).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of actvities
            /// </summary>
            /// <remarks>
            /// Lists all activities
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rows'>
            /// The number of activities to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetActivitiesAsync(this IInvoiceNinja operations, double? rows = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActivitiesWithHttpMessagesAsync(rows, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempts authentication
            /// </summary>
            /// <remarks>
            /// Returns a CompanyUser object on success
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object PostLogin(this IInvoiceNinja operations, Paths12jspfgapiV1LoginpostrequestbodycontentapplicationJsonschema body)
            {
                return operations.PostLoginAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempts authentication
            /// </summary>
            /// <remarks>
            /// Returns a CompanyUser object on success
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostLoginAsync(this IInvoiceNinja operations, Paths12jspfgapiV1LoginpostrequestbodycontentapplicationJsonschema body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostLoginWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Refreshes the dataset
            /// </summary>
            /// <remarks>
            /// Refreshes the dataset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Refresh(this IInvoiceNinja operations)
            {
                return operations.RefreshAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refreshes the dataset
            /// </summary>
            /// <remarks>
            /// Refreshes the dataset
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RefreshAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of clients
            /// </summary>
            /// <remarks>
            /// Lists clients, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the clients, these are handled by the ClientFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetClients(this IInvoiceNinja operations)
            {
                return operations.GetClientsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of clients
            /// </summary>
            /// <remarks>
            /// Lists clients, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the clients, these are handled by the ClientFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetClientsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClientsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a client
            /// </summary>
            /// <remarks>
            /// Adds an client to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreClient(this IInvoiceNinja operations)
            {
                return operations.StoreClientAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a client
            /// </summary>
            /// <remarks>
            /// Adds an client to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreClientAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreClientWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a client
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            public static object ShowClient(this IInvoiceNinja operations, string id)
            {
                return operations.ShowClientAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a client
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowClientAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowClientWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a client
            /// </summary>
            /// <remarks>
            /// Handles the updating of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            public static object UpdateClient(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateClientAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a client
            /// </summary>
            /// <remarks>
            /// Handles the updating of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateClientAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateClientWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a client
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            public static ValidationError DeleteClient(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteClientAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a client
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteClientAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteClientWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a client for editting
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            public static object EditClient(this IInvoiceNinja operations, string id)
            {
                return operations.EditClientAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a client for editting
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Client Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditClientAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditClientWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank client object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetClientsCreate(this IInvoiceNinja operations)
            {
                return operations.GetClientsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank client object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetClientsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClientsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of clients
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object BulkClients(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkClientsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of clients
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkClientsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkClientsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of companies
            /// </summary>
            /// <remarks>
            /// Lists companies, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the companies, these are handled by the CompanyFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCompanies(this IInvoiceNinja operations)
            {
                return operations.GetCompaniesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of companies
            /// </summary>
            /// <remarks>
            /// Lists companies, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the companies, these are handled by the CompanyFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCompaniesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompaniesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a company
            /// </summary>
            /// <remarks>
            /// Adds an company to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreCompany(this IInvoiceNinja operations)
            {
                return operations.StoreCompanyAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a company
            /// </summary>
            /// <remarks>
            /// Adds an company to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreCompanyAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreCompanyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank company object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCompaniesCreate(this IInvoiceNinja operations)
            {
                return operations.GetCompaniesCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank company object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCompaniesCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompaniesCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an company
            /// </summary>
            /// <remarks>
            /// Displays an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            public static object ShowCompany(this IInvoiceNinja operations, string id)
            {
                return operations.ShowCompanyAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an company
            /// </summary>
            /// <remarks>
            /// Displays an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowCompanyAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowCompanyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an company
            /// </summary>
            /// <remarks>
            /// Handles the updating of an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            public static object UpdateCompany(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateCompanyAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an company
            /// </summary>
            /// <remarks>
            /// Handles the updating of an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCompanyAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCompanyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a company
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            public static ValidationError DeleteCompany(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteCompanyAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a company
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteCompanyAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCompanyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an company for editting
            /// </summary>
            /// <remarks>
            /// Displays an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            public static object EditCompany(this IInvoiceNinja operations, string id)
            {
                return operations.EditCompanyAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an company for editting
            /// </summary>
            /// <remarks>
            /// Displays an company by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Company Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditCompanyAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCompanyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of company_gateways
            /// </summary>
            /// <remarks>
            /// Lists company_gateways, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the company_gateways, these are handled by the CompanyGatewayFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCompanyGateways(this IInvoiceNinja operations)
            {
                return operations.GetCompanyGatewaysAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of company_gateways
            /// </summary>
            /// <remarks>
            /// Lists company_gateways, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the company_gateways, these are handled by the CompanyGatewayFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCompanyGatewaysAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompanyGatewaysWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a CompanyGateway
            /// </summary>
            /// <remarks>
            /// Adds an CompanyGateway to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreCompanyGateway(this IInvoiceNinja operations)
            {
                return operations.StoreCompanyGatewayAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a CompanyGateway
            /// </summary>
            /// <remarks>
            /// Adds an CompanyGateway to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreCompanyGatewayAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreCompanyGatewayWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank CompanyGateway object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCompanyGatewaysCreate(this IInvoiceNinja operations)
            {
                return operations.GetCompanyGatewaysCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank CompanyGateway object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCompanyGatewaysCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompanyGatewaysCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an CompanyGateway
            /// </summary>
            /// <remarks>
            /// Displays an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            public static object ShowCompanyGateway(this IInvoiceNinja operations, string id)
            {
                return operations.ShowCompanyGatewayAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an CompanyGateway
            /// </summary>
            /// <remarks>
            /// Displays an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowCompanyGatewayAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowCompanyGatewayWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an CompanyGateway
            /// </summary>
            /// <remarks>
            /// Handles the updating of an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            public static object UpdateCompanyGateway(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateCompanyGatewayAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an CompanyGateway
            /// </summary>
            /// <remarks>
            /// Handles the updating of an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCompanyGatewayAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCompanyGatewayWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a CompanyGateway
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            public static ValidationError DeleteCompanyGateway(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteCompanyGatewayAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a CompanyGateway
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteCompanyGatewayAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCompanyGatewayWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an CompanyGateway for editting
            /// </summary>
            /// <remarks>
            /// Displays an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            public static object EditCompanyGateway(this IInvoiceNinja operations, string id)
            {
                return operations.EditCompanyGatewayAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an CompanyGateway for editting
            /// </summary>
            /// <remarks>
            /// Displays an CompanyGateway by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The CompanyGateway Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditCompanyGatewayAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCompanyGatewayWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of company_ledger
            /// </summary>
            /// <remarks>
            /// Lists the company_ledger.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCompanyLedger(this IInvoiceNinja operations)
            {
                return operations.GetCompanyLedgerAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of company_ledger
            /// </summary>
            /// <remarks>
            /// Lists the company_ledger.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCompanyLedgerAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompanyLedgerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a company user record
            /// </summary>
            /// <remarks>
            /// Attempts to update a company user record. A company user can modify only
            /// their settings fields. Full access for Admin users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            public static object UpdateCompanyUser(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateCompanyUserAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a company user record
            /// </summary>
            /// <remarks>
            /// Attempts to update a company user record. A company user can modify only
            /// their settings fields. Full access for Admin users
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCompanyUserAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCompanyUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of credits
            /// </summary>
            /// <remarks>
            /// Lists credits, search and filters allow fine grained lists to be generated.
            /// *
            /// *      Query parameters can be added to performed more fine grained
            /// filtering of the credits, these are handled by the CreditFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCredits(this IInvoiceNinja operations)
            {
                return operations.GetCreditsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of credits
            /// </summary>
            /// <remarks>
            /// Lists credits, search and filters allow fine grained lists to be generated.
            /// *
            /// *      Query parameters can be added to performed more fine grained
            /// filtering of the credits, these are handled by the CreditFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCreditsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCreditsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a credit
            /// </summary>
            /// <remarks>
            /// Adds an credit to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreCredit(this IInvoiceNinja operations)
            {
                return operations.StoreCreditAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a credit
            /// </summary>
            /// <remarks>
            /// Adds an credit to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreCreditAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreCreditWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank credit object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetCreditsCreate(this IInvoiceNinja operations)
            {
                return operations.GetCreditsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank credit object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCreditsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCreditsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an credit
            /// </summary>
            /// <remarks>
            /// Displays an credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Credit Hashed ID
            /// </param>
            public static object ShowCredit(this IInvoiceNinja operations, string id)
            {
                return operations.ShowCreditAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an credit
            /// </summary>
            /// <remarks>
            /// Displays an credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Credit Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowCreditAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowCreditWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a credit
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Credit Hashed ID
            /// </param>
            public static ValidationError DeleteCredit(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteCreditAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a credit
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Credit Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteCreditAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCreditWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an credit for editting
            /// </summary>
            /// <remarks>
            /// Displays an credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            public static object EditCredit(this IInvoiceNinja operations, string id)
            {
                return operations.EditCreditAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an credit for editting
            /// </summary>
            /// <remarks>
            /// Displays an credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditCreditAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCreditWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an Credit
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Credit Hashed ID
            /// </param>
            public static object UpdateCredit(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateCreditAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an Credit
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Credit by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Credit Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCreditAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCreditWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of credits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static ValidationError BulkCredits(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkCreditsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of credits
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> BulkCreditsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkCreditsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of designs
            /// </summary>
            /// <remarks>
            /// Lists designs
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDesigns(this IInvoiceNinja operations)
            {
                return operations.GetDesignsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of designs
            /// </summary>
            /// <remarks>
            /// Lists designs
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDesignsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDesignsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a design
            /// </summary>
            /// <remarks>
            /// Adds an design to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreDesign(this IInvoiceNinja operations)
            {
                return operations.StoreDesignAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a design
            /// </summary>
            /// <remarks>
            /// Adds an design to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreDesignAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreDesignWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a design
            /// </summary>
            /// <remarks>
            /// Displays a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            public static object ShowDesign(this IInvoiceNinja operations, string id)
            {
                return operations.ShowDesignAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a design
            /// </summary>
            /// <remarks>
            /// Displays a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowDesignAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowDesignWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a design
            /// </summary>
            /// <remarks>
            /// Handles the updating of a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            public static object UpdateDesign(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateDesignAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a design
            /// </summary>
            /// <remarks>
            /// Handles the updating of a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDesignAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDesignWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a design
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            public static ValidationError DeleteDesign(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteDesignAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a design
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteDesignAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDesignWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a design for editting
            /// </summary>
            /// <remarks>
            /// Displays a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            public static object EditDesign(this IInvoiceNinja operations, string id)
            {
                return operations.EditDesignAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a design for editting
            /// </summary>
            /// <remarks>
            /// Displays a design by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Design Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditDesignAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditDesignWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank design object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetDesignsCreate(this IInvoiceNinja operations)
            {
                return operations.GetDesignsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank design object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDesignsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDesignsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of designs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object BulkDesigns(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkDesignsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of designs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkDesignsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkDesignsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends an email for an entity
            /// </summary>
            /// <remarks>
            /// Sends an email for an entity
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The template subject and body
            /// </param>
            public static object SendEmailTemplate(this IInvoiceNinja operations, Pathss595z8apiV1EmailspostrequestbodycontentapplicationJsonschema body)
            {
                return operations.SendEmailTemplateAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends an email for an entity
            /// </summary>
            /// <remarks>
            /// Sends an email for an entity
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The template subject and body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendEmailTemplateAsync(this IInvoiceNinja operations, Pathss595z8apiV1EmailspostrequestbodycontentapplicationJsonschema body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendEmailTemplateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of expenses
            /// </summary>
            /// <remarks>
            /// Lists expenses, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the expenses, these are handled by the ExpenseFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetExpenses(this IInvoiceNinja operations)
            {
                return operations.GetExpensesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of expenses
            /// </summary>
            /// <remarks>
            /// Lists expenses, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the expenses, these are handled by the ExpenseFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetExpensesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExpensesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a client
            /// </summary>
            /// <remarks>
            /// Adds an client to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreExpense(this IInvoiceNinja operations)
            {
                return operations.StoreExpenseAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a client
            /// </summary>
            /// <remarks>
            /// Adds an client to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreExpenseAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreExpenseWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a client
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            public static object ShowExpense(this IInvoiceNinja operations, string id)
            {
                return operations.ShowExpenseAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a client
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowExpenseAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowExpenseWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a client
            /// </summary>
            /// <remarks>
            /// Handles the updating of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            public static object UpdateExpense(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateExpenseAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a client
            /// </summary>
            /// <remarks>
            /// Handles the updating of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateExpenseAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateExpenseWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a client
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            public static ValidationError DeleteExpense(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteExpenseAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a client
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteExpenseAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExpenseWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a client for editting
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            public static object EditExpense(this IInvoiceNinja operations, string id)
            {
                return operations.EditExpenseAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a client for editting
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Expense Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditExpenseAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditExpenseWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank client object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetExpensesCreate(this IInvoiceNinja operations)
            {
                return operations.GetExpensesCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank client object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetExpensesCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExpensesCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of expenses
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object BulkExpenses(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkExpensesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of expenses
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkExpensesAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkExpensesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of group_settings
            /// </summary>
            /// <remarks>
            /// Lists group_settings, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the group_settings, these are handled by the GroupSettingFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetGroupSettings(this IInvoiceNinja operations)
            {
                return operations.GetGroupSettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of group_settings
            /// </summary>
            /// <remarks>
            /// Lists group_settings, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the group_settings, these are handled by the GroupSettingFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGroupSettingsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a GroupSetting
            /// </summary>
            /// <remarks>
            /// Adds an GroupSetting to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreGroupSetting(this IInvoiceNinja operations)
            {
                return operations.StoreGroupSettingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a GroupSetting
            /// </summary>
            /// <remarks>
            /// Adds an GroupSetting to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreGroupSettingAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreGroupSettingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank GroupSetting object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetGroupSettingsCreate(this IInvoiceNinja operations)
            {
                return operations.GetGroupSettingsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank GroupSetting object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGroupSettingsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupSettingsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an GroupSetting
            /// </summary>
            /// <remarks>
            /// Displays an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            public static object ShowGroupSetting(this IInvoiceNinja operations, string id)
            {
                return operations.ShowGroupSettingAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an GroupSetting
            /// </summary>
            /// <remarks>
            /// Displays an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowGroupSettingAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowGroupSettingWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an GroupSetting
            /// </summary>
            /// <remarks>
            /// Handles the updating of an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            public static object UpdateGroupSetting(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateGroupSettingAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an GroupSetting
            /// </summary>
            /// <remarks>
            /// Handles the updating of an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateGroupSettingAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGroupSettingWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a GroupSetting
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            public static ValidationError DeleteGroupSetting(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteGroupSettingAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a GroupSetting
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteGroupSettingAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupSettingWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an GroupSetting for editting
            /// </summary>
            /// <remarks>
            /// Displays an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            public static object EditGroupSetting(this IInvoiceNinja operations, string id)
            {
                return operations.EditGroupSettingAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an GroupSetting for editting
            /// </summary>
            /// <remarks>
            /// Displays an GroupSetting by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The GroupSetting Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditGroupSettingAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditGroupSettingWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of invoices
            /// </summary>
            /// <remarks>
            /// Lists invoices, search and filters allow fine grained lists to be
            /// generated.
            /// *
            /// *  Query parameters can be added to performed more fine grained filtering
            /// of the invoices, these are handled by the InvoiceFilters class which
            /// defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetInvoices(this IInvoiceNinja operations)
            {
                return operations.GetInvoicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of invoices
            /// </summary>
            /// <remarks>
            /// Lists invoices, search and filters allow fine grained lists to be
            /// generated.
            /// *
            /// *  Query parameters can be added to performed more fine grained filtering
            /// of the invoices, these are handled by the InvoiceFilters class which
            /// defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInvoicesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvoicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a invoice
            /// </summary>
            /// <remarks>
            /// Adds an invoice to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreInvoice(this IInvoiceNinja operations)
            {
                return operations.StoreInvoiceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a invoice
            /// </summary>
            /// <remarks>
            /// Adds an invoice to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreInvoiceAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreInvoiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank invoice object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetInvoicesCreate(this IInvoiceNinja operations)
            {
                return operations.GetInvoicesCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank invoice object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInvoicesCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInvoicesCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an invoice
            /// </summary>
            /// <remarks>
            /// Displays an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            public static object ShowInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.ShowInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an invoice
            /// </summary>
            /// <remarks>
            /// Displays an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an invoice
            /// </summary>
            /// <remarks>
            /// Handles the updating of an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            public static object UpdateInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an invoice
            /// </summary>
            /// <remarks>
            /// Handles the updating of an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a invoice
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            public static ValidationError DeleteInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a invoice
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an invoice for editting
            /// </summary>
            /// <remarks>
            /// Displays an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            public static object EditInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.EditInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an invoice for editting
            /// </summary>
            /// <remarks>
            /// Displays an invoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static ValidationError BulkInvoices(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkInvoicesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> BulkInvoicesAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkInvoicesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a custom action on an invoice
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an invoice.
            /// *
            /// *  The current range of actions are as follows
            /// *  - clone_to_invoice
            /// *  - clone_to_quote
            /// *  - history
            /// *  - delivery_note
            /// *  - mark_paid
            /// *  - download
            /// *  - archive
            /// *  - delete
            /// *  - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            public static object ActionInvoice(this IInvoiceNinja operations, string id, string action)
            {
                return operations.ActionInvoiceAsync(id, action).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a custom action on an invoice
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an invoice.
            /// *
            /// *  The current range of actions are as follows
            /// *  - clone_to_invoice
            /// *  - clone_to_quote
            /// *  - history
            /// *  - delivery_note
            /// *  - mark_paid
            /// *  - download
            /// *  - archive
            /// *  - delete
            /// *  - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Invoice Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActionInvoiceAsync(this IInvoiceNinja operations, string id, string action, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActionInvoiceWithHttpMessagesAsync(id, action, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Download a specific invoice by invitation key
            /// </summary>
            /// <remarks>
            /// Downloads a specific invoice
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invitationKey'>
            /// The Invoice Invitation Key
            /// </param>
            public static ValidationError DownloadInvoice(this IInvoiceNinja operations, string invitationKey)
            {
                return operations.DownloadInvoiceAsync(invitationKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download a specific invoice by invitation key
            /// </summary>
            /// <remarks>
            /// Downloads a specific invoice
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invitationKey'>
            /// The Invoice Invitation Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DownloadInvoiceAsync(this IInvoiceNinja operations, string invitationKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DownloadInvoiceWithHttpMessagesAsync(invitationKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempts to claim a white label license
            /// </summary>
            /// <remarks>
            /// Attempts to claim a white label license
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='licenseKey'>
            /// The license hash
            /// </param>
            /// <param name='productId'>
            /// The ID of the product purchased.
            /// </param>
            public static ValidationError GetClaimLicense(this IInvoiceNinja operations, string licenseKey, string productId)
            {
                return operations.GetClaimLicenseAsync(licenseKey, productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempts to claim a white label license
            /// </summary>
            /// <remarks>
            /// Attempts to claim a white label license
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='licenseKey'>
            /// The license hash
            /// </param>
            /// <param name='productId'>
            /// The ID of the product purchased.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> GetClaimLicenseAsync(this IInvoiceNinja operations, string licenseKey, string productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClaimLicenseWithHttpMessagesAsync(licenseKey, productId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempts to purge a company record and all its child records
            /// </summary>
            /// <remarks>
            /// Attempts to purge a company record and all its child records
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// The Company Hashed ID
            /// </param>
            public static ValidationError PostPurgeCompany(this IInvoiceNinja operations, string company)
            {
                return operations.PostPurgeCompanyAsync(company).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempts to purge a company record and all its child records
            /// </summary>
            /// <remarks>
            /// Attempts to purge a company record and all its child records
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// The Company Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> PostPurgeCompanyAsync(this IInvoiceNinja operations, string company, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPurgeCompanyWithHttpMessagesAsync(company, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempts to purge a companies child records but save the company record and
            /// its settings
            /// </summary>
            /// <remarks>
            /// Attempts to purge a companies child records but save the company record and
            /// its settings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// The Company Hashed ID
            /// </param>
            public static ValidationError PostPurgeCompanySaveSettings(this IInvoiceNinja operations, string company)
            {
                return operations.PostPurgeCompanySaveSettingsAsync(company).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempts to purge a companies child records but save the company record and
            /// its settings
            /// </summary>
            /// <remarks>
            /// Attempts to purge a companies child records but save the company record and
            /// its settings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// The Company Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> PostPurgeCompanySaveSettingsAsync(this IInvoiceNinja operations, string company, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPurgeCompanySaveSettingsWithHttpMessagesAsync(company, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the migration from previous version of Invoice Ninja
            /// </summary>
            /// <remarks>
            /// Starts the migration from previous version of Invoice Ninja
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='migration'>
            /// The migraton file
            /// </param>
            public static ValidationError PostStartMigration(this IInvoiceNinja operations, Stream migration)
            {
                return operations.PostStartMigrationAsync(migration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the migration from previous version of Invoice Ninja
            /// </summary>
            /// <remarks>
            /// Starts the migration from previous version of Invoice Ninja
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='migration'>
            /// The migraton file
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> PostStartMigrationAsync(this IInvoiceNinja operations, Stream migration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostStartMigrationWithHttpMessagesAsync(migration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of payments
            /// </summary>
            /// <remarks>
            /// Lists payments, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the payments, these are handled by the PaymentFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetPayments(this IInvoiceNinja operations)
            {
                return operations.GetPaymentsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of payments
            /// </summary>
            /// <remarks>
            /// Lists payments, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the payments, these are handled by the PaymentFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPaymentsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Payment
            /// </summary>
            /// <remarks>
            /// Adds an Payment to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The payment request
            /// </param>
            public static object StorePayment(this IInvoiceNinja operations, Payment body)
            {
                return operations.StorePaymentAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Payment
            /// </summary>
            /// <remarks>
            /// Adds an Payment to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The payment request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StorePaymentAsync(this IInvoiceNinja operations, Payment body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StorePaymentWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank Payment object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetPaymentsCreate(this IInvoiceNinja operations)
            {
                return operations.GetPaymentsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank Payment object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPaymentsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an Payment
            /// </summary>
            /// <remarks>
            /// Displays an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            public static object ShowPayment(this IInvoiceNinja operations, string id)
            {
                return operations.ShowPaymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an Payment
            /// </summary>
            /// <remarks>
            /// Displays an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowPaymentAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowPaymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an Payment
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            public static object UpdatePayment(this IInvoiceNinja operations, string id)
            {
                return operations.UpdatePaymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an Payment
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdatePaymentAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePaymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Payment
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            public static ValidationError DeletePayment(this IInvoiceNinja operations, string id)
            {
                return operations.DeletePaymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Payment
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeletePaymentAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePaymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an Payment for editting
            /// </summary>
            /// <remarks>
            /// Displays an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            public static object EditPayment(this IInvoiceNinja operations, string id)
            {
                return operations.EditPaymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an Payment for editting
            /// </summary>
            /// <remarks>
            /// Displays an Payment by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditPaymentAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditPaymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of payments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object BulkPayments(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkPaymentsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of payments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkPaymentsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkPaymentsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a custom action on an Payment
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an Payment.
            ///
            /// The current range of actions are as follows
            /// - clone_to_Payment
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            public static object ActionPayment(this IInvoiceNinja operations, string id, string action)
            {
                return operations.ActionPaymentAsync(id, action).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a custom action on an Payment
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an Payment.
            ///
            /// The current range of actions are as follows
            /// - clone_to_Payment
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Payment Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActionPaymentAsync(this IInvoiceNinja operations, string id, string action, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActionPaymentWithHttpMessagesAsync(id, action, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Refund
            /// </summary>
            /// <remarks>
            /// Adds an Refund to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The refund request
            /// </param>
            public static object StoreRefund(this IInvoiceNinja operations, Payment body)
            {
                return operations.StoreRefundAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Refund
            /// </summary>
            /// <remarks>
            /// Adds an Refund to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The refund request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreRefundAsync(this IInvoiceNinja operations, Payment body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreRefundWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a pdf preview
            /// </summary>
            /// <remarks>
            /// Returns a pdf preview.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// The PDF
            /// </param>
            /// <param name='entityId'>
            /// The Entity ID
            /// </param>
            public static ValidationError GetPreview(this IInvoiceNinja operations, string entity, string entityId)
            {
                return operations.GetPreviewAsync(entity, entityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a pdf preview
            /// </summary>
            /// <remarks>
            /// Returns a pdf preview.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// The PDF
            /// </param>
            /// <param name='entityId'>
            /// The Entity ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> GetPreviewAsync(this IInvoiceNinja operations, string entity, string entityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPreviewWithHttpMessagesAsync(entity, entityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of products
            /// </summary>
            /// <remarks>
            /// Lists products, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the products, these are handled by the ProductFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetProducts(this IInvoiceNinja operations)
            {
                return operations.GetProductsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of products
            /// </summary>
            /// <remarks>
            /// Lists products, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the products, these are handled by the ProductFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProductsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Product
            /// </summary>
            /// <remarks>
            /// Adds an Product to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreProduct(this IInvoiceNinja operations)
            {
                return operations.StoreProductAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Product
            /// </summary>
            /// <remarks>
            /// Adds an Product to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreProductAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreProductWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank Product object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetProductsCreate(this IInvoiceNinja operations)
            {
                return operations.GetProductsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank Product object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetProductsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an Product
            /// </summary>
            /// <remarks>
            /// Displays an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            public static object ShowProduct(this IInvoiceNinja operations, string id)
            {
                return operations.ShowProductAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an Product
            /// </summary>
            /// <remarks>
            /// Displays an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowProductAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an Product
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            public static object UpdateProduct(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateProductAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an Product
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateProductAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Product
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            public static ValidationError DeleteProduct(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteProductAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Product
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteProductAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an Product for editting
            /// </summary>
            /// <remarks>
            /// Displays an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            public static object EditProduct(this IInvoiceNinja operations, string id)
            {
                return operations.EditProductAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an Product for editting
            /// </summary>
            /// <remarks>
            /// Displays an Product by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Product Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditProductAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditProductWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of products
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed IDs
            /// </param>
            public static object BulkProducts(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkProductsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of products
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed IDs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkProductsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkProductsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of quotes
            /// </summary>
            /// <remarks>
            /// Lists quotes, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the quotes, these are handled by the QuoteFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetQuotes(this IInvoiceNinja operations)
            {
                return operations.GetQuotesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of quotes
            /// </summary>
            /// <remarks>
            /// Lists quotes, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the quotes, these are handled by the QuoteFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetQuotesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Quote
            /// </summary>
            /// <remarks>
            /// Adds an Quote to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreQuote(this IInvoiceNinja operations)
            {
                return operations.StoreQuoteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Quote
            /// </summary>
            /// <remarks>
            /// Adds an Quote to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreQuoteAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreQuoteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank Quote object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetQuotesCreate(this IInvoiceNinja operations)
            {
                return operations.GetQuotesCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank Quote object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetQuotesCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuotesCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an Quote
            /// </summary>
            /// <remarks>
            /// Displays an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            public static object ShowQuote(this IInvoiceNinja operations, string id)
            {
                return operations.ShowQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an Quote
            /// </summary>
            /// <remarks>
            /// Displays an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an Quote
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            public static object UpdateQuote(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an Quote
            /// </summary>
            /// <remarks>
            /// Handles the updating of an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Quote
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            public static ValidationError DeleteQuote(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Quote
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an Quote for editting
            /// </summary>
            /// <remarks>
            /// Displays an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            public static object EditQuote(this IInvoiceNinja operations, string id)
            {
                return operations.EditQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an Quote for editting
            /// </summary>
            /// <remarks>
            /// Displays an Quote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of quotes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed ids
            /// </param>
            public static object BulkQuotes(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkQuotesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of quotes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkQuotesAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkQuotesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a custom action on an Quote
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an Quote.
            ///
            /// The current range of actions are as follows
            /// - clone_to_Quote
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            public static object ActionQuote(this IInvoiceNinja operations, string id, string action)
            {
                return operations.ActionQuoteAsync(id, action).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a custom action on an Quote
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an Quote.
            ///
            /// The current range of actions are as follows
            /// - clone_to_Quote
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Quote Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActionQuoteAsync(this IInvoiceNinja operations, string id, string action, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActionQuoteWithHttpMessagesAsync(id, action, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of recurring_invoices
            /// </summary>
            /// <remarks>
            /// Lists recurring_invoices, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the recurring_invoices, these are handled by the RecurringInvoiceFilters
            /// class which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRecurringInvoices(this IInvoiceNinja operations)
            {
                return operations.GetRecurringInvoicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of recurring_invoices
            /// </summary>
            /// <remarks>
            /// Lists recurring_invoices, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the recurring_invoices, these are handled by the RecurringInvoiceFilters
            /// class which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRecurringInvoicesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecurringInvoicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Adds an RecurringInvoice to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreRecurringInvoice(this IInvoiceNinja operations)
            {
                return operations.StoreRecurringInvoiceAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Adds an RecurringInvoice to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreRecurringInvoiceAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreRecurringInvoiceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank RecurringInvoice object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRecurringInvoicesCreate(this IInvoiceNinja operations)
            {
                return operations.GetRecurringInvoicesCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank RecurringInvoice object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRecurringInvoicesCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecurringInvoicesCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Displays an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            public static object ShowRecurringInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.ShowRecurringInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Displays an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowRecurringInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowRecurringInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Handles the updating of an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            public static object UpdateRecurringInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateRecurringInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Handles the updating of an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateRecurringInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRecurringInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            public static ValidationError DeleteRecurringInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteRecurringInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteRecurringInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRecurringInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an RecurringInvoice for editting
            /// </summary>
            /// <remarks>
            /// Displays an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            public static object EditRecurringInvoice(this IInvoiceNinja operations, string id)
            {
                return operations.EditRecurringInvoiceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an RecurringInvoice for editting
            /// </summary>
            /// <remarks>
            /// Displays an RecurringInvoice by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditRecurringInvoiceAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditRecurringInvoiceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of recurring_invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed IDs
            /// </param>
            public static object BulkRecurringInvoices(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkRecurringInvoicesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of recurring_invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed IDs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkRecurringInvoicesAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkRecurringInvoicesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a custom action on an RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an RecurringInvoice.
            ///
            /// The current range of actions are as follows
            /// - clone_to_RecurringInvoice
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            public static object ActionRecurringInvoice(this IInvoiceNinja operations, string id, string action)
            {
                return operations.ActionRecurringInvoiceAsync(id, action).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a custom action on an RecurringInvoice
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an RecurringInvoice.
            ///
            /// The current range of actions are as follows
            /// - clone_to_RecurringInvoice
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringInvoice Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActionRecurringInvoiceAsync(this IInvoiceNinja operations, string id, string action, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActionRecurringInvoiceWithHttpMessagesAsync(id, action, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of recurring_quotes
            /// </summary>
            /// <remarks>
            /// Lists recurring_quotes, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the recurring_quotes, these are handled by the RecurringQuoteFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRecurringQuotes(this IInvoiceNinja operations)
            {
                return operations.GetRecurringQuotesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of recurring_quotes
            /// </summary>
            /// <remarks>
            /// Lists recurring_quotes, search and filters allow fine grained lists to be
            /// generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the recurring_quotes, these are handled by the RecurringQuoteFilters class
            /// which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRecurringQuotesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecurringQuotesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a RecurringQuote
            /// </summary>
            /// <remarks>
            /// Adds an RecurringQuote to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreRecurringQuote(this IInvoiceNinja operations)
            {
                return operations.StoreRecurringQuoteAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a RecurringQuote
            /// </summary>
            /// <remarks>
            /// Adds an RecurringQuote to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreRecurringQuoteAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreRecurringQuoteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank RecurringQuote object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRecurringQuotesCreate(this IInvoiceNinja operations)
            {
                return operations.GetRecurringQuotesCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank RecurringQuote object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRecurringQuotesCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecurringQuotesCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an RecurringQuote
            /// </summary>
            /// <remarks>
            /// Displays an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            public static object ShowRecurringQuote(this IInvoiceNinja operations, string id)
            {
                return operations.ShowRecurringQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an RecurringQuote
            /// </summary>
            /// <remarks>
            /// Displays an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowRecurringQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowRecurringQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an RecurringQuote
            /// </summary>
            /// <remarks>
            /// Handles the updating of an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            public static object UpdateRecurringQuote(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateRecurringQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an RecurringQuote
            /// </summary>
            /// <remarks>
            /// Handles the updating of an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateRecurringQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRecurringQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a RecurringQuote
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            public static ValidationError DeleteRecurringQuote(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteRecurringQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a RecurringQuote
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteRecurringQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRecurringQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an RecurringQuote for editting
            /// </summary>
            /// <remarks>
            /// Displays an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            public static object EditRecurringQuote(this IInvoiceNinja operations, string id)
            {
                return operations.EditRecurringQuoteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an RecurringQuote for editting
            /// </summary>
            /// <remarks>
            /// Displays an RecurringQuote by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditRecurringQuoteAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditRecurringQuoteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of recurring_quotes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed ids
            /// </param>
            public static object BulkRecurringQuotes(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkRecurringQuotesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of recurring_quotes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkRecurringQuotesAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkRecurringQuotesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a custom action on an RecurringQuote
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an RecurringQuote.
            ///
            /// The current range of actions are as follows
            /// - clone_to_RecurringQuote
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            public static object ActionRecurringQuote(this IInvoiceNinja operations, string id, string action)
            {
                return operations.ActionRecurringQuoteAsync(id, action).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a custom action on an RecurringQuote
            /// </summary>
            /// <remarks>
            /// Performs a custom action on an RecurringQuote.
            ///
            /// The current range of actions are as follows
            /// - clone_to_RecurringQuote
            /// - clone_to_quote
            /// - history
            /// - delivery_note
            /// - mark_paid
            /// - download
            /// - archive
            /// - delete
            /// - email
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The RecurringQuote Hashed ID
            /// </param>
            /// <param name='action'>
            /// The action string to be performed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActionRecurringQuoteAsync(this IInvoiceNinja operations, string id, string action, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActionRecurringQuoteWithHttpMessagesAsync(id, action, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a system update
            /// </summary>
            /// <remarks>
            /// Performs a system update
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ValidationError SelfUpdate(this IInvoiceNinja operations)
            {
                return operations.SelfUpdateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a system update
            /// </summary>
            /// <remarks>
            /// Performs a system update
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> SelfUpdateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SelfUpdateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of subscriptions
            /// </summary>
            /// <remarks>
            /// Lists subscriptions, search and filters allow fine grained lists to be
            /// generated.
            /// *
            /// *      Query parameters can be added to performed more fine grained
            /// filtering of the subscriptions, these are handled by the
            /// SubscriptionFilters class which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSubscriptions(this IInvoiceNinja operations)
            {
                return operations.GetSubscriptionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of subscriptions
            /// </summary>
            /// <remarks>
            /// Lists subscriptions, search and filters allow fine grained lists to be
            /// generated.
            /// *
            /// *      Query parameters can be added to performed more fine grained
            /// filtering of the subscriptions, these are handled by the
            /// SubscriptionFilters class which defines the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a subscription
            /// </summary>
            /// <remarks>
            /// Adds an subscription to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreSubscription(this IInvoiceNinja operations)
            {
                return operations.StoreSubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a subscription
            /// </summary>
            /// <remarks>
            /// Adds an subscription to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreSubscriptionAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a subscription
            /// </summary>
            /// <remarks>
            /// Displays a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            public static object ShowSubscription(this IInvoiceNinja operations, string id)
            {
                return operations.ShowSubscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a subscription
            /// </summary>
            /// <remarks>
            /// Displays a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowSubscriptionAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowSubscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a subscription
            /// </summary>
            /// <remarks>
            /// Handles the updating of a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            public static object UpdateSubscription(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateSubscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a subscription
            /// </summary>
            /// <remarks>
            /// Handles the updating of a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateSubscriptionAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSubscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a subscription
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            public static ValidationError DeleteSubscription(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteSubscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a subscription
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteSubscriptionAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a subscription for editting
            /// </summary>
            /// <remarks>
            /// Displays a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            public static object EditSubscription(this IInvoiceNinja operations, string id)
            {
                return operations.EditSubscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a subscription for editting
            /// </summary>
            /// <remarks>
            /// Displays a subscription by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Subscription Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditSubscriptionAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditSubscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank subscription object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSubscriptionsCreate(this IInvoiceNinja operations)
            {
                return operations.GetSubscriptionsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank subscription object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of subscriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object BulkSubscriptions(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkSubscriptionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of subscriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkSubscriptionsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkSubscriptionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a hook
            /// </summary>
            /// <remarks>
            /// Adds a hooks to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreHook(this IInvoiceNinja operations)
            {
                return operations.StoreHookAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a hook
            /// </summary>
            /// <remarks>
            /// Adds a hooks to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreHookAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreHookWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hook
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a hook by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription Hashed ID
            /// </param>
            public static ValidationError DeleteHook(this IInvoiceNinja operations, string subscriptionId)
            {
                return operations.DeleteHookAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a hook
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a hook by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteHookAsync(this IInvoiceNinja operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHookWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a support message to Invoice Ninja team
            /// </summary>
            /// <remarks>
            /// Allows a user to send a support message to the Invoice Ninja Team
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The message
            /// </param>
            public static IList<string> SupportMessage(this IInvoiceNinja operations, string body)
            {
                return operations.SupportMessageAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a support message to Invoice Ninja team
            /// </summary>
            /// <remarks>
            /// Allows a user to send a support message to the Invoice Ninja Team
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> SupportMessageAsync(this IInvoiceNinja operations, string body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SupportMessageWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of tax_rates
            /// </summary>
            /// <remarks>
            /// Lists tax rates
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTaxRates(this IInvoiceNinja operations)
            {
                return operations.GetTaxRatesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of tax_rates
            /// </summary>
            /// <remarks>
            /// Lists tax rates
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaxRatesAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaxRatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank Tax Rate object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTaxRateCreate(this IInvoiceNinja operations)
            {
                return operations.GetTaxRateCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank Tax Rate object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaxRateCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaxRateCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a Tax Rate
            /// </summary>
            /// <remarks>
            /// Displays an TaxRate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            public static object ShowTaxRate(this IInvoiceNinja operations, string id)
            {
                return operations.ShowTaxRateAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a Tax Rate
            /// </summary>
            /// <remarks>
            /// Displays an TaxRate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowTaxRateAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowTaxRateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a tax rate
            /// </summary>
            /// <remarks>
            /// Handles the updating of a tax rate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            public static object UpdateTaxRate(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateTaxRateAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a tax rate
            /// </summary>
            /// <remarks>
            /// Handles the updating of a tax rate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTaxRateAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaxRateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a TaxRate
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an TaxRate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            public static ValidationError DeleteTaxRate(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteTaxRateAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a TaxRate
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an TaxRate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteTaxRateAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTaxRateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a Tax Rate for editting
            /// </summary>
            /// <remarks>
            /// Displays a Tax Rate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            public static object EditTaxRate(this IInvoiceNinja operations, string id)
            {
                return operations.EditTaxRateAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a Tax Rate for editting
            /// </summary>
            /// <remarks>
            /// Displays a Tax Rate by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The TaxRate Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditTaxRateAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditTaxRateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a entity template with the template variables replaced with the
            /// Entities
            /// </summary>
            /// <remarks>
            /// Returns a entity template with the template variables replaced with the
            /// Entities
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The template subject and body
            /// </param>
            /// <param name='entity'>
            /// The Entity (invoice,quote,recurring_invoice)
            /// </param>
            /// <param name='entityId'>
            /// The Entity ID
            /// </param>
            public static object GetShowTemplate(this IInvoiceNinja operations, Paths1329sb1apiV1TemplatespostrequestbodycontentapplicationJsonschema body, string entity, string entityId)
            {
                return operations.GetShowTemplateAsync(body, entity, entityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a entity template with the template variables replaced with the
            /// Entities
            /// </summary>
            /// <remarks>
            /// Returns a entity template with the template variables replaced with the
            /// Entities
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The template subject and body
            /// </param>
            /// <param name='entity'>
            /// The Entity (invoice,quote,recurring_invoice)
            /// </param>
            /// <param name='entityId'>
            /// The Entity ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetShowTemplateAsync(this IInvoiceNinja operations, Paths1329sb1apiV1TemplatespostrequestbodycontentapplicationJsonschema body, string entity, string entityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShowTemplateWithHttpMessagesAsync(body, entity, entityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of company tokens
            /// </summary>
            /// <remarks>
            /// Lists company tokens.
            /// *
            /// *   Query parameters can be added to performed more fine grained filtering
            /// of the tokens, these are handled by the TokenFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTokens(this IInvoiceNinja operations)
            {
                return operations.GetTokensAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of company tokens
            /// </summary>
            /// <remarks>
            /// Lists company tokens.
            /// *
            /// *   Query parameters can be added to performed more fine grained filtering
            /// of the tokens, these are handled by the TokenFilters class which defines
            /// the methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTokensAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTokensWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a token
            /// </summary>
            /// <remarks>
            /// Adds an token to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreToken(this IInvoiceNinja operations)
            {
                return operations.StoreTokenAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a token
            /// </summary>
            /// <remarks>
            /// Adds an token to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreTokenAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreTokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a token
            /// </summary>
            /// <remarks>
            /// Displays a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            public static object ShowToken(this IInvoiceNinja operations, string id)
            {
                return operations.ShowTokenAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a token
            /// </summary>
            /// <remarks>
            /// Displays a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowTokenAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowTokenWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a token
            /// </summary>
            /// <remarks>
            /// Handles the updating of a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            public static object UpdateToken(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateTokenAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a token
            /// </summary>
            /// <remarks>
            /// Handles the updating of a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTokenAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTokenWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a token
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            public static ValidationError DeleteToken(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteTokenAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a token
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteTokenAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTokenWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a token for editting
            /// </summary>
            /// <remarks>
            /// Displays a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            public static object EditToken(this IInvoiceNinja operations, string id)
            {
                return operations.EditTokenAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a token for editting
            /// </summary>
            /// <remarks>
            /// Displays a token by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Token Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditTokenAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditTokenWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank token object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetTokensCreate(this IInvoiceNinja operations)
            {
                return operations.GetTokensCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank token object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTokensCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTokensCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of tokens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Token ids
            /// </param>
            public static object BulkTokens(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkTokensAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of tokens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Token ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkTokensAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkTokensWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of users
            /// </summary>
            /// <remarks>
            /// Lists users, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the users, these are handled by the UserFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUsers(this IInvoiceNinja operations)
            {
                return operations.GetUsersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of users
            /// </summary>
            /// <remarks>
            /// Lists users, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the users, these are handled by the UserFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUsersAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a User
            /// </summary>
            /// <remarks>
            /// Adds an User to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreUser(this IInvoiceNinja operations)
            {
                return operations.StoreUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a User
            /// </summary>
            /// <remarks>
            /// Adds an User to the system
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreUserAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank User object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetUsersCreate(this IInvoiceNinja operations)
            {
                return operations.GetUsersCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank User object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetUsersCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an User
            /// </summary>
            /// <remarks>
            /// Displays an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            public static object ShowUser(this IInvoiceNinja operations, string id)
            {
                return operations.ShowUserAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an User
            /// </summary>
            /// <remarks>
            /// Displays an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowUserAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an User
            /// </summary>
            /// <remarks>
            /// Handles the updating of an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            public static object UpdateUser(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateUserAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an User
            /// </summary>
            /// <remarks>
            /// Handles the updating of an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateUserAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a User
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            /// <param name='tokenName'>
            /// Customized name for the Users API Token
            /// </param>
            public static ValidationError DeleteUser(this IInvoiceNinja operations, string id, string tokenName = default(string))
            {
                return operations.DeleteUserAsync(id, tokenName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a User
            /// </summary>
            /// <remarks>
            /// Handles the deletion of an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            /// <param name='tokenName'>
            /// Customized name for the Users API Token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteUserAsync(this IInvoiceNinja operations, string id, string tokenName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(id, tokenName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows an User for editting
            /// </summary>
            /// <remarks>
            /// Displays an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            public static object EditUser(this IInvoiceNinja operations, string id)
            {
                return operations.EditUserAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows an User for editting
            /// </summary>
            /// <remarks>
            /// Displays an User by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The User Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditUserAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed ids
            /// </param>
            public static object BulkUsers(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkUsersAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Hashed ids
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkUsersAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkUsersWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attach an existing user to a company
            /// </summary>
            /// <remarks>
            /// Attach an existing user to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The company user object
            /// </param>
            /// <param name='user'>
            /// The user hashed_id
            /// </param>
            public static object AttachUser(this IInvoiceNinja operations, CompanyUser body, string user)
            {
                return operations.AttachUserAsync(body, user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attach an existing user to a company
            /// </summary>
            /// <remarks>
            /// Attach an existing user to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The company user object
            /// </param>
            /// <param name='user'>
            /// The user hashed_id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AttachUserAsync(this IInvoiceNinja operations, CompanyUser body, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AttachUserWithHttpMessagesAsync(body, user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Detach an existing user to a company
            /// </summary>
            /// <remarks>
            /// Detach an existing user from a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user hashed_id
            /// </param>
            public static ValidationError DetachUser(this IInvoiceNinja operations, string user)
            {
                return operations.DetachUserAsync(user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Detach an existing user to a company
            /// </summary>
            /// <remarks>
            /// Detach an existing user from a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The user hashed_id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DetachUserAsync(this IInvoiceNinja operations, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetachUserWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of vendors
            /// </summary>
            /// <remarks>
            /// Lists vendors, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the vendors, these are handled by the VendorFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVendors(this IInvoiceNinja operations)
            {
                return operations.GetVendorsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of vendors
            /// </summary>
            /// <remarks>
            /// Lists vendors, search and filters allow fine grained lists to be generated.
            ///
            /// Query parameters can be added to performed more fine grained filtering of
            /// the vendors, these are handled by the VendorFilters class which defines the
            /// methods available
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVendorsAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVendorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a client
            /// </summary>
            /// <remarks>
            /// Adds an client to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object StoreVendor(this IInvoiceNinja operations)
            {
                return operations.StoreVendorAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a client
            /// </summary>
            /// <remarks>
            /// Adds an client to a company
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StoreVendorAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreVendorWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a client
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            public static object ShowVendor(this IInvoiceNinja operations, string id)
            {
                return operations.ShowVendorAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a client
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ShowVendorAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ShowVendorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a client
            /// </summary>
            /// <remarks>
            /// Handles the updating of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            public static object UpdateVendor(this IInvoiceNinja operations, string id)
            {
                return operations.UpdateVendorAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a client
            /// </summary>
            /// <remarks>
            /// Handles the updating of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateVendorAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVendorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a client
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            public static ValidationError DeleteVendor(this IInvoiceNinja operations, string id)
            {
                return operations.DeleteVendorAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a client
            /// </summary>
            /// <remarks>
            /// Handles the deletion of a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidationError> DeleteVendorAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVendorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows a client for editting
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            public static object EditVendor(this IInvoiceNinja operations, string id)
            {
                return operations.EditVendorAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows a client for editting
            /// </summary>
            /// <remarks>
            /// Displays a client by id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The Vendor Hashed ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditVendorAsync(this IInvoiceNinja operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditVendorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a new blank client object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetVendorsCreate(this IInvoiceNinja operations)
            {
                return operations.GetVendorsCreateAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a new blank client object
            /// </summary>
            /// <remarks>
            /// Returns a blank object with default values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVendorsCreateAsync(this IInvoiceNinja operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVendorsCreateWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs bulk actions on an array of vendors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            public static object BulkVendors(this IInvoiceNinja operations, IList<int?> body)
            {
                return operations.BulkVendorsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs bulk actions on an array of vendors
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// User credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BulkVendorsAsync(this IInvoiceNinja operations, IList<int?> body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkVendorsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
