// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace InvoiceNinjaClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CompanySettings
    {
        /// <summary>
        /// Initializes a new instance of the CompanySettings class.
        /// </summary>
        public CompanySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CompanySettings class.
        /// </summary>
        /// <param name="timezoneId">The timezone id</param>
        /// <param name="dateFormatId">____________</param>
        /// <param name="militaryTime">____________</param>
        /// <param name="languageId">____________</param>
        /// <param name="showCurrencyCode">____________</param>
        /// <param name="currencyId">The default currency id</param>
        /// <param name="paymentTerms">-1 sets no payment term, 0 sets payment
        /// due immediately, positive integers indicates payment terms in
        /// days</param>
        /// <param name="companyGatewayIds">A commad separate list of available
        /// gateways</param>
        /// <param name="customValue1">____________</param>
        /// <param name="customValue2">____________</param>
        /// <param name="customValue3">____________</param>
        /// <param name="customValue4">____________</param>
        /// <param name="defaultTaskRate">____________</param>
        /// <param name="sendReminders">____________</param>
        /// <param name="enableClientPortalTasks">____________</param>
        /// <param name="emailStyle">options include
        /// plain,light,dark,custom</param>
        /// <param name="replyToEmail">The reply to email address</param>
        /// <param name="bccEmail">A comma separate list of BCC emails</param>
        /// <param name="pdfEmailAttachment">Toggles whether to attach PDF as
        /// attachment</param>
        /// <param name="ublEmailAttachment">Toggles whether to attach UBL as
        /// attachment</param>
        /// <param name="emailStyleCustom">The custom template</param>
        /// <param name="counterNumberApplied">enum when the invoice number
        /// counter is set, ie when_saved, when_sent, when_paid</param>
        /// <param name="quoteNumberApplied">enum when the quote number counter
        /// is set, ie when_saved, when_sent</param>
        /// <param name="customMessageDashboard">____________</param>
        /// <param name="customMessageUnpaidInvoice">____________</param>
        /// <param name="customMessagePaidInvoice">____________</param>
        /// <param name="customMessageUnapprovedQuote">____________</param>
        /// <param name="lockSentInvoices">____________</param>
        /// <param name="autoArchiveInvoice">____________</param>
        /// <param name="autoArchiveQuote">____________</param>
        /// <param name="autoConvertQuote">____________</param>
        /// <param name="inclusiveTaxes">____________</param>
        /// <param name="translations">JSON payload of customized
        /// translations</param>
        /// <param name="taskNumberPattern">Allows customisation of the task
        /// number pattern</param>
        /// <param name="taskNumberCounter">____________</param>
        /// <param name="reminderSendTime">Time from UTC +0 when the email will
        /// be sent to the client</param>
        /// <param name="expenseNumberPattern">Allows customisation of the
        /// expense number pattern</param>
        /// <param name="expenseNumberCounter">____________</param>
        /// <param name="vendorNumberPattern">Allows customisation of the
        /// vendor number pattern</param>
        /// <param name="vendorNumberCounter">____________</param>
        /// <param name="ticketNumberPattern">Allows customisation of the
        /// ticket number pattern</param>
        /// <param name="ticketNumberCounter">____________</param>
        /// <param name="paymentNumberPattern">Allows customisation of the
        /// payment number pattern</param>
        /// <param name="paymentNumberCounter">____________</param>
        /// <param name="invoiceNumberPattern">Allows customisation of the
        /// invoice number pattern</param>
        /// <param name="invoiceNumberCounter">____________</param>
        /// <param name="quoteNumberPattern">Allows customisation of the quote
        /// number pattern</param>
        /// <param name="quoteNumberCounter">____________</param>
        /// <param name="clientNumberPattern">Allows customisation of the
        /// client number pattern</param>
        /// <param name="clientNumberCounter">____________</param>
        /// <param name="creditNumberPattern">Allows customisation of the
        /// credit number pattern</param>
        /// <param name="creditNumberCounter">____________</param>
        /// <param name="recurringInvoiceNumberPrefix">This string is prepended
        /// to the recurring invoice number</param>
        /// <param name="resetCounterFrequencyId">CONSTANT which is used to
        /// apply the frequency which the counters are reset</param>
        /// <param name="resetCounterDate">The explicit date which is used to
        /// reset counters</param>
        /// <param name="counterPadding">Pads the counter with leading
        /// zeros</param>
        /// <param name="sharedInvoiceQuoteCounter">Flags whether to share the
        /// counter for invoices and quotes</param>
        /// <param name="updateProducts">Determines if client fields are
        /// updated from third party APIs</param>
        /// <param name="fillProducts">Automatically fill products based on
        /// product_key</param>
        /// <param name="invoiceTerms">The default invoice terms</param>
        /// <param name="quoteTerms">The default quote terms</param>
        /// <param name="invoiceTaxes">Taxes can be applied to the
        /// invoice</param>
        /// <param name="enabledItemTaxRates">Taxes can be applied to the
        /// invoice items</param>
        /// <param name="invoiceDesignId">The default design id (invoice, quote
        /// etc)</param>
        /// <param name="quoteDesignId">The default design id (invoice, quote
        /// etc)</param>
        /// <param name="invoiceFooter">The default invoice footer</param>
        /// <param name="invoiceLabels">JSON string of invoice labels</param>
        /// <param name="taxRate1">The tax rate (float)</param>
        /// <param name="taxName1">The tax name</param>
        /// <param name="taxRate2">The tax rate (float)</param>
        /// <param name="taxName2">The tax name</param>
        /// <param name="taxRate3">The tax rate (float)</param>
        /// <param name="taxName3">The tax name</param>
        /// <param name="paymentTypeId">The default payment type id</param>
        /// <param name="customFields">JSON string of custom fields</param>
        /// <param name="invoiceFields">JSON string of invoice fields</param>
        /// <param name="emailFooter">The default email footer</param>
        /// <param name="emailSendingMethod">The email driver to use to send
        /// email, options include default, gmail</param>
        /// <param name="gmailSendingUserId">The hashed_id of the user account
        /// to send email from</param>
        /// <param name="emailTemplateInvoice">The full template for invoice
        /// emails</param>
        /// <param name="emailTemplateQuote">The full template for quote
        /// emails</param>
        /// <param name="emailTemplatePayment">The full template for payment
        /// emails</param>
        /// <param name="emailSubjectReminder1">Email subject for
        /// Reminder</param>
        /// <param name="emailSubjectReminder2">Email subject for
        /// Reminder</param>
        /// <param name="emailSubjectReminder3">Email subject for
        /// Reminder</param>
        /// <param name="emailSubjectReminderEndless">Email subject for endless
        /// reminders</param>
        /// <param name="emailTemplateReminder1">The full template for Reminder
        /// 1</param>
        /// <param name="emailTemplateReminder2">The full template for Reminder
        /// 2</param>
        /// <param name="emailTemplateReminder3">The full template for Reminder
        /// 3</param>
        /// <param name="emailTemplateReminderEndless">The full template for
        /// enless reminders</param>
        /// <param name="enablePortalPassword">Toggles whether a password is
        /// required to log into the client portal</param>
        /// <param name="showAcceptInvoiceTerms">Toggles whether the terms
        /// dialogue is shown to the client</param>
        /// <param name="showAcceptQuoteTerms">Toggles whether the terms
        /// dialogue is shown to the client</param>
        /// <param name="requireInvoiceSignature">Toggles whether a invoice
        /// signature is required</param>
        /// <param name="requireQuoteSignature">Toggles whether a quote
        /// signature is required</param>
        /// <param name="name">The company name</param>
        /// <param name="companyLogo">The company logo file</param>
        /// <param name="website">The company website URL</param>
        /// <param name="address1">____________</param>
        /// <param name="address2">____________</param>
        /// <param name="city">____________</param>
        /// <param name="state">____________</param>
        /// <param name="postalCode">____________</param>
        /// <param name="phone">____________</param>
        /// <param name="email">____________</param>
        /// <param name="countryId">The country ID</param>
        /// <param name="vatNumber">____________</param>
        /// <param name="pageSize">The default page size</param>
        /// <param name="fontSize">The font size</param>
        /// <param name="primaryFont">The primary font</param>
        /// <param name="secondaryFont">The secondary font</param>
        /// <param name="hidePaidToDate">____________</param>
        /// <param name="embedDocuments">____________</param>
        /// <param name="allPagesHeader">____________</param>
        /// <param name="allPagesFooter">____________</param>
        /// <param name="documentEmailAttachment">____________</param>
        /// <param name="enableClientPortalPassword">____________</param>
        /// <param name="enableEmailMarkup">____________</param>
        /// <param name="enableClientPortalDashboard">____________</param>
        /// <param name="enableClientPortal">____________</param>
        /// <param name="emailTemplateStatement">____________</param>
        /// <param name="emailSubjectStatement">____________</param>
        /// <param name="signatureOnPdf">____________</param>
        /// <param name="sendPortalPassword">____________</param>
        /// <param name="quoteFooter">____________</param>
        /// <param name="emailSubjectCustom1">____________</param>
        /// <param name="emailSubjectCustom2">____________</param>
        /// <param name="emailSubjectCustom3">____________</param>
        /// <param name="emailTemplateCustom1">____________</param>
        /// <param name="emailTemplateCustom2">____________</param>
        /// <param name="emailTemplateCustom3">____________</param>
        /// <param name="enableReminder1">____________</param>
        /// <param name="enableReminder2">____________</param>
        /// <param name="enableReminder3">____________</param>
        /// <param name="numDaysReminder1">The Reminder interval</param>
        /// <param name="numDaysReminder2">The Reminder interval</param>
        /// <param name="numDaysReminder3">The Reminder interval</param>
        /// <param name="scheduleReminder1">(enum: after_invoice_date,
        /// before_due_date, after_due_date)</param>
        /// <param name="scheduleReminder2">(enum: after_invoice_date,
        /// before_due_date, after_due_date)</param>
        /// <param name="scheduleReminder3">(enum: after_invoice_date,
        /// before_due_date, after_due_date)</param>
        /// <param name="lateFeeAmount1">____________</param>
        /// <param name="lateFeeAmount2">____________</param>
        /// <param name="lateFeeAmount3">____________</param>
        /// <param name="endlessReminderFrequencyId">____________</param>
        /// <param name="clientOnlinePaymentNotification">____________</param>
        /// <param name="clientManualPaymentNotification">____________</param>
        public CompanySettings(string timezoneId = default(string), string dateFormatId = default(string), bool? militaryTime = default(bool?), string languageId = default(string), bool? showCurrencyCode = default(bool?), string currencyId = default(string), int? paymentTerms = default(int?), string companyGatewayIds = default(string), string customValue1 = default(string), string customValue2 = default(string), string customValue3 = default(string), string customValue4 = default(string), double? defaultTaskRate = default(double?), bool? sendReminders = default(bool?), bool? enableClientPortalTasks = default(bool?), string emailStyle = default(string), string replyToEmail = default(string), string bccEmail = default(string), bool? pdfEmailAttachment = default(bool?), bool? ublEmailAttachment = default(bool?), string emailStyleCustom = default(string), string counterNumberApplied = default(string), string quoteNumberApplied = default(string), string customMessageDashboard = default(string), string customMessageUnpaidInvoice = default(string), string customMessagePaidInvoice = default(string), string customMessageUnapprovedQuote = default(string), bool? lockSentInvoices = default(bool?), bool? autoArchiveInvoice = default(bool?), bool? autoArchiveQuote = default(bool?), bool? autoConvertQuote = default(bool?), bool? inclusiveTaxes = default(bool?), object translations = default(object), string taskNumberPattern = default(string), int? taskNumberCounter = default(int?), int? reminderSendTime = default(int?), string expenseNumberPattern = default(string), int? expenseNumberCounter = default(int?), string vendorNumberPattern = default(string), int? vendorNumberCounter = default(int?), string ticketNumberPattern = default(string), int? ticketNumberCounter = default(int?), string paymentNumberPattern = default(string), int? paymentNumberCounter = default(int?), string invoiceNumberPattern = default(string), int? invoiceNumberCounter = default(int?), string quoteNumberPattern = default(string), int? quoteNumberCounter = default(int?), string clientNumberPattern = default(string), int? clientNumberCounter = default(int?), string creditNumberPattern = default(string), int? creditNumberCounter = default(int?), string recurringInvoiceNumberPrefix = default(string), int? resetCounterFrequencyId = default(int?), string resetCounterDate = default(string), int? counterPadding = default(int?), bool? sharedInvoiceQuoteCounter = default(bool?), bool? updateProducts = default(bool?), bool? convertProducts = default(bool?), bool? fillProducts = default(bool?), string invoiceTerms = default(string), string quoteTerms = default(string), double? invoiceTaxes = default(double?), double? enabledItemTaxRates = default(double?), string invoiceDesignId = default(string), string quoteDesignId = default(string), string invoiceFooter = default(string), string invoiceLabels = default(string), double? taxRate1 = default(double?), string taxName1 = default(string), double? taxRate2 = default(double?), string taxName2 = default(string), double? taxRate3 = default(double?), string taxName3 = default(string), string paymentTypeId = default(string), string customFields = default(string), string invoiceFields = default(string), string emailFooter = default(string), string emailSendingMethod = default(string), string gmailSendingUserId = default(string), string emailSubjectInvoice = default(string), string emailSubjectQuote = default(string), string emailSubjectPayment = default(string), string emailTemplateInvoice = default(string), string emailTemplateQuote = default(string), string emailTemplatePayment = default(string), string emailSubjectReminder1 = default(string), string emailSubjectReminder2 = default(string), string emailSubjectReminder3 = default(string), string emailSubjectReminderEndless = default(string), string emailTemplateReminder1 = default(string), string emailTemplateReminder2 = default(string), string emailTemplateReminder3 = default(string), string emailTemplateReminderEndless = default(string), bool? enablePortalPassword = default(bool?), bool? showAcceptInvoiceTerms = default(bool?), bool? showAcceptQuoteTerms = default(bool?), bool? requireInvoiceSignature = default(bool?), bool? requireQuoteSignature = default(bool?), string name = default(string), object companyLogo = default(object), string website = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string phone = default(string), string email = default(string), string countryId = default(string), string vatNumber = default(string), string pageSize = default(string), double? fontSize = default(double?), string primaryFont = default(string), string secondaryFont = default(string), bool? hidePaidToDate = default(bool?), bool? embedDocuments = default(bool?), bool? allPagesHeader = default(bool?), bool? allPagesFooter = default(bool?), bool? documentEmailAttachment = default(bool?), bool? enableClientPortalPassword = default(bool?), bool? enableEmailMarkup = default(bool?), bool? enableClientPortalDashboard = default(bool?), bool? enableClientPortal = default(bool?), string emailTemplateStatement = default(string), string emailSubjectStatement = default(string), bool? signatureOnPdf = default(bool?), bool? sendPortalPassword = default(bool?), string quoteFooter = default(string), string emailSubjectCustom1 = default(string), string emailSubjectCustom2 = default(string), string emailSubjectCustom3 = default(string), string emailTemplateCustom1 = default(string), string emailTemplateCustom2 = default(string), string emailTemplateCustom3 = default(string), bool? enableReminder1 = default(bool?), bool? enableReminder2 = default(bool?), bool? enableReminder3 = default(bool?), double? numDaysReminder1 = default(double?), double? numDaysReminder2 = default(double?), double? numDaysReminder3 = default(double?), string scheduleReminder1 = default(string), string scheduleReminder2 = default(string), string scheduleReminder3 = default(string), double? lateFeeAmount1 = default(double?), double? lateFeeAmount2 = default(double?), double? lateFeeAmount3 = default(double?), string endlessReminderFrequencyId = default(string), bool? clientOnlinePaymentNotification = default(bool?), bool? clientManualPaymentNotification = default(bool?))
        {
            TimezoneId = timezoneId;
            DateFormatId = dateFormatId;
            MilitaryTime = militaryTime;
            LanguageId = languageId;
            ShowCurrencyCode = showCurrencyCode;
            CurrencyId = currencyId;
            PaymentTerms = paymentTerms;
            CompanyGatewayIds = companyGatewayIds;
            CustomValue1 = customValue1;
            CustomValue2 = customValue2;
            CustomValue3 = customValue3;
            CustomValue4 = customValue4;
            DefaultTaskRate = defaultTaskRate;
            SendReminders = sendReminders;
            EnableClientPortalTasks = enableClientPortalTasks;
            EmailStyle = emailStyle;
            ReplyToEmail = replyToEmail;
            BccEmail = bccEmail;
            PdfEmailAttachment = pdfEmailAttachment;
            UblEmailAttachment = ublEmailAttachment;
            EmailStyleCustom = emailStyleCustom;
            CounterNumberApplied = counterNumberApplied;
            QuoteNumberApplied = quoteNumberApplied;
            CustomMessageDashboard = customMessageDashboard;
            CustomMessageUnpaidInvoice = customMessageUnpaidInvoice;
            CustomMessagePaidInvoice = customMessagePaidInvoice;
            CustomMessageUnapprovedQuote = customMessageUnapprovedQuote;
            LockSentInvoices = lockSentInvoices;
            AutoArchiveInvoice = autoArchiveInvoice;
            AutoArchiveQuote = autoArchiveQuote;
            AutoConvertQuote = autoConvertQuote;
            InclusiveTaxes = inclusiveTaxes;
            Translations = translations;
            TaskNumberPattern = taskNumberPattern;
            TaskNumberCounter = taskNumberCounter;
            ReminderSendTime = reminderSendTime;
            ExpenseNumberPattern = expenseNumberPattern;
            ExpenseNumberCounter = expenseNumberCounter;
            VendorNumberPattern = vendorNumberPattern;
            VendorNumberCounter = vendorNumberCounter;
            TicketNumberPattern = ticketNumberPattern;
            TicketNumberCounter = ticketNumberCounter;
            PaymentNumberPattern = paymentNumberPattern;
            PaymentNumberCounter = paymentNumberCounter;
            InvoiceNumberPattern = invoiceNumberPattern;
            InvoiceNumberCounter = invoiceNumberCounter;
            QuoteNumberPattern = quoteNumberPattern;
            QuoteNumberCounter = quoteNumberCounter;
            ClientNumberPattern = clientNumberPattern;
            ClientNumberCounter = clientNumberCounter;
            CreditNumberPattern = creditNumberPattern;
            CreditNumberCounter = creditNumberCounter;
            RecurringInvoiceNumberPrefix = recurringInvoiceNumberPrefix;
            ResetCounterFrequencyId = resetCounterFrequencyId;
            ResetCounterDate = resetCounterDate;
            CounterPadding = counterPadding;
            SharedInvoiceQuoteCounter = sharedInvoiceQuoteCounter;
            UpdateProducts = updateProducts;
            ConvertProducts = convertProducts;
            FillProducts = fillProducts;
            InvoiceTerms = invoiceTerms;
            QuoteTerms = quoteTerms;
            InvoiceTaxes = invoiceTaxes;
            EnabledItemTaxRates = enabledItemTaxRates;
            InvoiceDesignId = invoiceDesignId;
            QuoteDesignId = quoteDesignId;
            InvoiceFooter = invoiceFooter;
            InvoiceLabels = invoiceLabels;
            TaxRate1 = taxRate1;
            TaxName1 = taxName1;
            TaxRate2 = taxRate2;
            TaxName2 = taxName2;
            TaxRate3 = taxRate3;
            TaxName3 = taxName3;
            PaymentTypeId = paymentTypeId;
            CustomFields = customFields;
            InvoiceFields = invoiceFields;
            EmailFooter = emailFooter;
            EmailSendingMethod = emailSendingMethod;
            GmailSendingUserId = gmailSendingUserId;
            EmailSubjectInvoice = emailSubjectInvoice;
            EmailSubjectQuote = emailSubjectQuote;
            EmailSubjectPayment = emailSubjectPayment;
            EmailTemplateInvoice = emailTemplateInvoice;
            EmailTemplateQuote = emailTemplateQuote;
            EmailTemplatePayment = emailTemplatePayment;
            EmailSubjectReminder1 = emailSubjectReminder1;
            EmailSubjectReminder2 = emailSubjectReminder2;
            EmailSubjectReminder3 = emailSubjectReminder3;
            EmailSubjectReminderEndless = emailSubjectReminderEndless;
            EmailTemplateReminder1 = emailTemplateReminder1;
            EmailTemplateReminder2 = emailTemplateReminder2;
            EmailTemplateReminder3 = emailTemplateReminder3;
            EmailTemplateReminderEndless = emailTemplateReminderEndless;
            EnablePortalPassword = enablePortalPassword;
            ShowAcceptInvoiceTerms = showAcceptInvoiceTerms;
            ShowAcceptQuoteTerms = showAcceptQuoteTerms;
            RequireInvoiceSignature = requireInvoiceSignature;
            RequireQuoteSignature = requireQuoteSignature;
            Name = name;
            CompanyLogo = companyLogo;
            Website = website;
            Address1 = address1;
            Address2 = address2;
            City = city;
            State = state;
            PostalCode = postalCode;
            Phone = phone;
            Email = email;
            CountryId = countryId;
            VatNumber = vatNumber;
            PageSize = pageSize;
            FontSize = fontSize;
            PrimaryFont = primaryFont;
            SecondaryFont = secondaryFont;
            HidePaidToDate = hidePaidToDate;
            EmbedDocuments = embedDocuments;
            AllPagesHeader = allPagesHeader;
            AllPagesFooter = allPagesFooter;
            DocumentEmailAttachment = documentEmailAttachment;
            EnableClientPortalPassword = enableClientPortalPassword;
            EnableEmailMarkup = enableEmailMarkup;
            EnableClientPortalDashboard = enableClientPortalDashboard;
            EnableClientPortal = enableClientPortal;
            EmailTemplateStatement = emailTemplateStatement;
            EmailSubjectStatement = emailSubjectStatement;
            SignatureOnPdf = signatureOnPdf;
            SendPortalPassword = sendPortalPassword;
            QuoteFooter = quoteFooter;
            EmailSubjectCustom1 = emailSubjectCustom1;
            EmailSubjectCustom2 = emailSubjectCustom2;
            EmailSubjectCustom3 = emailSubjectCustom3;
            EmailTemplateCustom1 = emailTemplateCustom1;
            EmailTemplateCustom2 = emailTemplateCustom2;
            EmailTemplateCustom3 = emailTemplateCustom3;
            EnableReminder1 = enableReminder1;
            EnableReminder2 = enableReminder2;
            EnableReminder3 = enableReminder3;
            NumDaysReminder1 = numDaysReminder1;
            NumDaysReminder2 = numDaysReminder2;
            NumDaysReminder3 = numDaysReminder3;
            ScheduleReminder1 = scheduleReminder1;
            ScheduleReminder2 = scheduleReminder2;
            ScheduleReminder3 = scheduleReminder3;
            LateFeeAmount1 = lateFeeAmount1;
            LateFeeAmount2 = lateFeeAmount2;
            LateFeeAmount3 = lateFeeAmount3;
            EndlessReminderFrequencyId = endlessReminderFrequencyId;
            ClientOnlinePaymentNotification = clientOnlinePaymentNotification;
            ClientManualPaymentNotification = clientManualPaymentNotification;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the timezone id
        /// </summary>
        [JsonProperty(PropertyName = "timezone_id")]
        public string TimezoneId { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "date_format_id")]
        public string DateFormatId { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "military_time")]
        public bool? MilitaryTime { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "language_id")]
        public string LanguageId { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "show_currency_code")]
        public bool? ShowCurrencyCode { get; set; }

        /// <summary>
        /// Gets or sets the default currency id
        /// </summary>
        [JsonProperty(PropertyName = "currency_id")]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or sets -1 sets no payment term, 0 sets payment due
        /// immediately, positive integers indicates payment terms in days
        /// </summary>
        [JsonProperty(PropertyName = "payment_terms")]
        public int? PaymentTerms { get; set; }

        /// <summary>
        /// Gets or sets a commad separate list of available gateways
        /// </summary>
        [JsonProperty(PropertyName = "company_gateway_ids")]
        public string CompanyGatewayIds { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_value1")]
        public string CustomValue1 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_value2")]
        public string CustomValue2 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_value3")]
        public string CustomValue3 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_value4")]
        public string CustomValue4 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "default_task_rate")]
        public double? DefaultTaskRate { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "send_reminders")]
        public bool? SendReminders { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_client_portal_tasks")]
        public bool? EnableClientPortalTasks { get; set; }

        /// <summary>
        /// Gets or sets options include plain,light,dark,custom
        /// </summary>
        [JsonProperty(PropertyName = "email_style")]
        public string EmailStyle { get; set; }

        /// <summary>
        /// Gets or sets the reply to email address
        /// </summary>
        [JsonProperty(PropertyName = "reply_to_email")]
        public string ReplyToEmail { get; set; }

        /// <summary>
        /// Gets or sets a comma separate list of BCC emails
        /// </summary>
        [JsonProperty(PropertyName = "bcc_email")]
        public string BccEmail { get; set; }

        /// <summary>
        /// Gets or sets toggles whether to attach PDF as attachment
        /// </summary>
        [JsonProperty(PropertyName = "pdf_email_attachment")]
        public bool? PdfEmailAttachment { get; set; }

        /// <summary>
        /// Gets or sets toggles whether to attach UBL as attachment
        /// </summary>
        [JsonProperty(PropertyName = "ubl_email_attachment")]
        public bool? UblEmailAttachment { get; set; }

        /// <summary>
        /// Gets or sets the custom template
        /// </summary>
        [JsonProperty(PropertyName = "email_style_custom")]
        public string EmailStyleCustom { get; set; }

        /// <summary>
        /// Gets or sets enum when the invoice number counter is set, ie
        /// when_saved, when_sent, when_paid
        /// </summary>
        [JsonProperty(PropertyName = "counter_number_applied")]
        public string CounterNumberApplied { get; set; }

        /// <summary>
        /// Gets or sets enum when the quote number counter is set, ie
        /// when_saved, when_sent
        /// </summary>
        [JsonProperty(PropertyName = "quote_number_applied")]
        public string QuoteNumberApplied { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_message_dashboard")]
        public string CustomMessageDashboard { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_message_unpaid_invoice")]
        public string CustomMessageUnpaidInvoice { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_message_paid_invoice")]
        public string CustomMessagePaidInvoice { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "custom_message_unapproved_quote")]
        public string CustomMessageUnapprovedQuote { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "lock_sent_invoices")]
        public bool? LockSentInvoices { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "auto_archive_invoice")]
        public bool? AutoArchiveInvoice { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "auto_archive_quote")]
        public bool? AutoArchiveQuote { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "auto_convert_quote")]
        public bool? AutoConvertQuote { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "inclusive_taxes")]
        public bool? InclusiveTaxes { get; set; }

        /// <summary>
        /// Gets or sets JSON payload of customized translations
        /// </summary>
        [JsonProperty(PropertyName = "translations")]
        public object Translations { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the task number pattern
        /// </summary>
        [JsonProperty(PropertyName = "task_number_pattern")]
        public string TaskNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "task_number_counter")]
        public int? TaskNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets time from UTC +0 when the email will be sent to the
        /// client
        /// </summary>
        [JsonProperty(PropertyName = "reminder_send_time")]
        public int? ReminderSendTime { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the expense number pattern
        /// </summary>
        [JsonProperty(PropertyName = "expense_number_pattern")]
        public string ExpenseNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "expense_number_counter")]
        public int? ExpenseNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the vendor number pattern
        /// </summary>
        [JsonProperty(PropertyName = "vendor_number_pattern")]
        public string VendorNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "vendor_number_counter")]
        public int? VendorNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the ticket number pattern
        /// </summary>
        [JsonProperty(PropertyName = "ticket_number_pattern")]
        public string TicketNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "ticket_number_counter")]
        public int? TicketNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the payment number pattern
        /// </summary>
        [JsonProperty(PropertyName = "payment_number_pattern")]
        public string PaymentNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "payment_number_counter")]
        public int? PaymentNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the invoice number pattern
        /// </summary>
        [JsonProperty(PropertyName = "invoice_number_pattern")]
        public string InvoiceNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "invoice_number_counter")]
        public int? InvoiceNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the quote number pattern
        /// </summary>
        [JsonProperty(PropertyName = "quote_number_pattern")]
        public string QuoteNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "quote_number_counter")]
        public int? QuoteNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the client number pattern
        /// </summary>
        [JsonProperty(PropertyName = "client_number_pattern")]
        public string ClientNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "client_number_counter")]
        public int? ClientNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets allows customisation of the credit number pattern
        /// </summary>
        [JsonProperty(PropertyName = "credit_number_pattern")]
        public string CreditNumberPattern { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "credit_number_counter")]
        public int? CreditNumberCounter { get; set; }

        /// <summary>
        /// Gets or sets this string is prepended to the recurring invoice
        /// number
        /// </summary>
        [JsonProperty(PropertyName = "recurring_invoice_number_prefix")]
        public string RecurringInvoiceNumberPrefix { get; set; }

        /// <summary>
        /// Gets or sets CONSTANT which is used to apply the frequency which
        /// the counters are reset
        /// </summary>
        [JsonProperty(PropertyName = "reset_counter_frequency_id")]
        public int? ResetCounterFrequencyId { get; set; }

        /// <summary>
        /// Gets or sets the explicit date which is used to reset counters
        /// </summary>
        [JsonProperty(PropertyName = "reset_counter_date")]
        public string ResetCounterDate { get; set; }

        /// <summary>
        /// Gets or sets pads the counter with leading zeros
        /// </summary>
        [JsonProperty(PropertyName = "counter_padding")]
        public int? CounterPadding { get; set; }

        /// <summary>
        /// Gets or sets flags whether to share the counter for invoices and
        /// quotes
        /// </summary>
        [JsonProperty(PropertyName = "shared_invoice_quote_counter")]
        public bool? SharedInvoiceQuoteCounter { get; set; }

        /// <summary>
        /// Gets or sets determines if client fields are updated from third
        /// party APIs
        /// </summary>
        [JsonProperty(PropertyName = "update_products")]
        public bool? UpdateProducts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "convert_products")]
        public bool? ConvertProducts { get; set; }

        /// <summary>
        /// Gets or sets automatically fill products based on product_key
        /// </summary>
        [JsonProperty(PropertyName = "fill_products")]
        public bool? FillProducts { get; set; }

        /// <summary>
        /// Gets or sets the default invoice terms
        /// </summary>
        [JsonProperty(PropertyName = "invoice_terms")]
        public string InvoiceTerms { get; set; }

        /// <summary>
        /// Gets or sets the default quote terms
        /// </summary>
        [JsonProperty(PropertyName = "quote_terms")]
        public string QuoteTerms { get; set; }

        /// <summary>
        /// Gets or sets taxes can be applied to the invoice
        /// </summary>
        [JsonProperty(PropertyName = "invoice_taxes")]
        public double? InvoiceTaxes { get; set; }

        /// <summary>
        /// Gets or sets taxes can be applied to the invoice items
        /// </summary>
        [JsonProperty(PropertyName = "enabled_item_tax_rates")]
        public double? EnabledItemTaxRates { get; set; }

        /// <summary>
        /// Gets or sets the default design id (invoice, quote etc)
        /// </summary>
        [JsonProperty(PropertyName = "invoice_design_id")]
        public string InvoiceDesignId { get; set; }

        /// <summary>
        /// Gets or sets the default design id (invoice, quote etc)
        /// </summary>
        [JsonProperty(PropertyName = "quote_design_id")]
        public string QuoteDesignId { get; set; }

        /// <summary>
        /// Gets or sets the default invoice footer
        /// </summary>
        [JsonProperty(PropertyName = "invoice_footer")]
        public string InvoiceFooter { get; set; }

        /// <summary>
        /// Gets or sets JSON string of invoice labels
        /// </summary>
        [JsonProperty(PropertyName = "invoice_labels")]
        public string InvoiceLabels { get; set; }

        /// <summary>
        /// Gets or sets the tax rate (float)
        /// </summary>
        [JsonProperty(PropertyName = "tax_rate1")]
        public double? TaxRate1 { get; set; }

        /// <summary>
        /// Gets or sets the tax name
        /// </summary>
        [JsonProperty(PropertyName = "tax_name1")]
        public string TaxName1 { get; set; }

        /// <summary>
        /// Gets or sets the tax rate (float)
        /// </summary>
        [JsonProperty(PropertyName = "tax_rate2")]
        public double? TaxRate2 { get; set; }

        /// <summary>
        /// Gets or sets the tax name
        /// </summary>
        [JsonProperty(PropertyName = "tax_name2")]
        public string TaxName2 { get; set; }

        /// <summary>
        /// Gets or sets the tax rate (float)
        /// </summary>
        [JsonProperty(PropertyName = "tax_rate3")]
        public double? TaxRate3 { get; set; }

        /// <summary>
        /// Gets or sets the tax name
        /// </summary>
        [JsonProperty(PropertyName = "tax_name3")]
        public string TaxName3 { get; set; }

        /// <summary>
        /// Gets or sets the default payment type id
        /// </summary>
        [JsonProperty(PropertyName = "payment_type_id")]
        public string PaymentTypeId { get; set; }

        /// <summary>
        /// Gets or sets JSON string of custom fields
        /// </summary>
        [JsonProperty(PropertyName = "custom_fields")]
        public string CustomFields { get; set; }

        /// <summary>
        /// Gets or sets JSON string of invoice fields
        /// </summary>
        [JsonProperty(PropertyName = "invoice_fields")]
        public string InvoiceFields { get; set; }

        /// <summary>
        /// Gets or sets the default email footer
        /// </summary>
        [JsonProperty(PropertyName = "email_footer")]
        public string EmailFooter { get; set; }

        /// <summary>
        /// Gets or sets the email driver to use to send email, options include
        /// default, gmail
        /// </summary>
        [JsonProperty(PropertyName = "email_sending_method")]
        public string EmailSendingMethod { get; set; }

        /// <summary>
        /// Gets or sets the hashed_id of the user account to send email from
        /// </summary>
        [JsonProperty(PropertyName = "gmail_sending_user_id")]
        public string GmailSendingUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_invoice")]
        public string EmailSubjectInvoice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_quote")]
        public string EmailSubjectQuote { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_payment")]
        public string EmailSubjectPayment { get; set; }

        /// <summary>
        /// Gets or sets the full template for invoice emails
        /// </summary>
        [JsonProperty(PropertyName = "email_template_invoice")]
        public string EmailTemplateInvoice { get; set; }

        /// <summary>
        /// Gets or sets the full template for quote emails
        /// </summary>
        [JsonProperty(PropertyName = "email_template_quote")]
        public string EmailTemplateQuote { get; set; }

        /// <summary>
        /// Gets or sets the full template for payment emails
        /// </summary>
        [JsonProperty(PropertyName = "email_template_payment")]
        public string EmailTemplatePayment { get; set; }

        /// <summary>
        /// Gets or sets email subject for Reminder
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_reminder1")]
        public string EmailSubjectReminder1 { get; set; }

        /// <summary>
        /// Gets or sets email subject for Reminder
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_reminder2")]
        public string EmailSubjectReminder2 { get; set; }

        /// <summary>
        /// Gets or sets email subject for Reminder
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_reminder3")]
        public string EmailSubjectReminder3 { get; set; }

        /// <summary>
        /// Gets or sets email subject for endless reminders
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_reminder_endless")]
        public string EmailSubjectReminderEndless { get; set; }

        /// <summary>
        /// Gets or sets the full template for Reminder 1
        /// </summary>
        [JsonProperty(PropertyName = "email_template_reminder1")]
        public string EmailTemplateReminder1 { get; set; }

        /// <summary>
        /// Gets or sets the full template for Reminder 2
        /// </summary>
        [JsonProperty(PropertyName = "email_template_reminder2")]
        public string EmailTemplateReminder2 { get; set; }

        /// <summary>
        /// Gets or sets the full template for Reminder 3
        /// </summary>
        [JsonProperty(PropertyName = "email_template_reminder3")]
        public string EmailTemplateReminder3 { get; set; }

        /// <summary>
        /// Gets or sets the full template for enless reminders
        /// </summary>
        [JsonProperty(PropertyName = "email_template_reminder_endless")]
        public string EmailTemplateReminderEndless { get; set; }

        /// <summary>
        /// Gets or sets toggles whether a password is required to log into the
        /// client portal
        /// </summary>
        [JsonProperty(PropertyName = "enable_portal_password")]
        public bool? EnablePortalPassword { get; set; }

        /// <summary>
        /// Gets or sets toggles whether the terms dialogue is shown to the
        /// client
        /// </summary>
        [JsonProperty(PropertyName = "show_accept_invoice_terms")]
        public bool? ShowAcceptInvoiceTerms { get; set; }

        /// <summary>
        /// Gets or sets toggles whether the terms dialogue is shown to the
        /// client
        /// </summary>
        [JsonProperty(PropertyName = "show_accept_quote_terms")]
        public bool? ShowAcceptQuoteTerms { get; set; }

        /// <summary>
        /// Gets or sets toggles whether a invoice signature is required
        /// </summary>
        [JsonProperty(PropertyName = "require_invoice_signature")]
        public bool? RequireInvoiceSignature { get; set; }

        /// <summary>
        /// Gets or sets toggles whether a quote signature is required
        /// </summary>
        [JsonProperty(PropertyName = "require_quote_signature")]
        public bool? RequireQuoteSignature { get; set; }

        /// <summary>
        /// Gets or sets the company name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the company logo file
        /// </summary>
        [JsonProperty(PropertyName = "company_logo")]
        public object CompanyLogo { get; set; }

        /// <summary>
        /// Gets or sets the company website URL
        /// </summary>
        [JsonProperty(PropertyName = "website")]
        public string Website { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "postal_code")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the country ID
        /// </summary>
        [JsonProperty(PropertyName = "country_id")]
        public string CountryId { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "vat_number")]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or sets the default page size
        /// </summary>
        [JsonProperty(PropertyName = "page_size")]
        public string PageSize { get; set; }

        /// <summary>
        /// Gets or sets the font size
        /// </summary>
        [JsonProperty(PropertyName = "font_size")]
        public double? FontSize { get; set; }

        /// <summary>
        /// Gets or sets the primary font
        /// </summary>
        [JsonProperty(PropertyName = "primary_font")]
        public string PrimaryFont { get; set; }

        /// <summary>
        /// Gets or sets the secondary font
        /// </summary>
        [JsonProperty(PropertyName = "secondary_font")]
        public string SecondaryFont { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "hide_paid_to_date")]
        public bool? HidePaidToDate { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "embed_documents")]
        public bool? EmbedDocuments { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "all_pages_header")]
        public bool? AllPagesHeader { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "all_pages_footer")]
        public bool? AllPagesFooter { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "document_email_attachment")]
        public bool? DocumentEmailAttachment { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_client_portal_password")]
        public bool? EnableClientPortalPassword { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_email_markup")]
        public bool? EnableEmailMarkup { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_client_portal_dashboard")]
        public bool? EnableClientPortalDashboard { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_client_portal")]
        public bool? EnableClientPortal { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_template_statement")]
        public string EmailTemplateStatement { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_statement")]
        public string EmailSubjectStatement { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "signature_on_pdf")]
        public bool? SignatureOnPdf { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "send_portal_password")]
        public bool? SendPortalPassword { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "quote_footer")]
        public string QuoteFooter { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_custom1")]
        public string EmailSubjectCustom1 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_custom2")]
        public string EmailSubjectCustom2 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_subject_custom3")]
        public string EmailSubjectCustom3 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_template_custom1")]
        public string EmailTemplateCustom1 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_template_custom2")]
        public string EmailTemplateCustom2 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "email_template_custom3")]
        public string EmailTemplateCustom3 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_reminder1")]
        public bool? EnableReminder1 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_reminder2")]
        public bool? EnableReminder2 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "enable_reminder3")]
        public bool? EnableReminder3 { get; set; }

        /// <summary>
        /// Gets or sets the Reminder interval
        /// </summary>
        [JsonProperty(PropertyName = "num_days_reminder1")]
        public double? NumDaysReminder1 { get; set; }

        /// <summary>
        /// Gets or sets the Reminder interval
        /// </summary>
        [JsonProperty(PropertyName = "num_days_reminder2")]
        public double? NumDaysReminder2 { get; set; }

        /// <summary>
        /// Gets or sets the Reminder interval
        /// </summary>
        [JsonProperty(PropertyName = "num_days_reminder3")]
        public double? NumDaysReminder3 { get; set; }

        /// <summary>
        /// Gets or sets (enum: after_invoice_date, before_due_date,
        /// after_due_date)
        /// </summary>
        [JsonProperty(PropertyName = "schedule_reminder1")]
        public string ScheduleReminder1 { get; set; }

        /// <summary>
        /// Gets or sets (enum: after_invoice_date, before_due_date,
        /// after_due_date)
        /// </summary>
        [JsonProperty(PropertyName = "schedule_reminder2")]
        public string ScheduleReminder2 { get; set; }

        /// <summary>
        /// Gets or sets (enum: after_invoice_date, before_due_date,
        /// after_due_date)
        /// </summary>
        [JsonProperty(PropertyName = "schedule_reminder3")]
        public string ScheduleReminder3 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "late_fee_amount1")]
        public double? LateFeeAmount1 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "late_fee_amount2")]
        public double? LateFeeAmount2 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "late_fee_amount3")]
        public double? LateFeeAmount3 { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "endless_reminder_frequency_id")]
        public string EndlessReminderFrequencyId { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "client_online_payment_notification")]
        public bool? ClientOnlinePaymentNotification { get; set; }

        /// <summary>
        /// Gets or sets ____________
        /// </summary>
        [JsonProperty(PropertyName = "client_manual_payment_notification")]
        public bool? ClientManualPaymentNotification { get; set; }

    }
}
